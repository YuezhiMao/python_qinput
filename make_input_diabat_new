#! /usr/bin/env python

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
    UseMsg = '''
    make_input_diabat [options] [xyz_path] [frgm_path]
    '''
    parser = OptionParser(usage=UseMsg)
    parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
    parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
    parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback,type='string',default=None,help='create input for certain xyz files')
    parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
    parser.add_option('-m','--method',dest='method',action='callback',type='string', default=None, callback=string_sp_callback,help='The methods (density functionals) to use')
    parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
    parser.add_option('--diabat', dest='diabat', action='callback', type='string', callback=string_sp_callback, default=None, help='Specify the diabatization method')
    parser.add_option('--fodft_method', dest='fodft_method', action='store', type='int', default=1, help='Specify the flavor of FODFT')
    parser.add_option('--msdft_method', dest='msdft_method', action='store', type='int', default=2, help='SPecify the flavor of MSDFT')
    parser.add_option('--et', dest='do_ET', action='store_true', default=False, help='doing electron transfer')
    parser.add_option('--ex_almo',dest='ex_almo',type='string',action='store',default=None,help='doing excited state almo coupling')
    parser.add_option('--spin_adapt',dest='spin_adapt',type='int',action='store',default=0,help='specify the spin adaptation method in MSDFT')
    parser.add_option('--pinv',dest='pinv',type='int',action='store',default=0,help='specify MSDFT2 pseudo-inverse thresh')
    options, args = parser.parse_args(ArgsIn)

    if len(args) < 3:
        parser.print_help()
        sys.exit(0)
    if len(options.diabat) == 0:
        print("The diabatization method has to be specified")
        parser.print_help()
        sys.exit(0)
    if options.ex_almo != None and (not os.path.exists(options.ex_almo)):
        print("Can't find file "+options.ex_almo)
        parser.print_help()
        sys.exit(0)
    return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def Append_Dev_Section(fw, diabat, options):
    fw.write('\n')
    fw.write('$development\n')
    if diabat.upper() == 'MSDFT':
        if options.ex_almo != None:
            fw.write('ex_almo_msdft  1\n')
        if options.spin_adapt > 0:
            fw.write('spin_adaptation  %d\n' %options.spin_adapt)  
        if options.pinv > 0:
            fw.write('pinv_thresh  %d\n' %options.pinv)
    fw.write('$end\n')

def Append_CDFT_Section(fw, FRGM, do_ET): 
    #Note: CDFT jobs use the same frgm files as FODFT(2n-1)@D^+A
    #      or FODFT(2n+1)@D^-A
    #Focus on constraints on fragment 1
    fw.write('\n')
    fw.write('$cdft\n')
    if not do_ET: 
        #D^+A
        fw.write('-1.0\n')
        fw.write('1.0  1  %d\n' %FRGM.natoms_frgm[0])
        fw.write('1.0\n')
        fw.write('1.0  1  %d  s\n' %FRGM.natoms_frgm[0])
        fw.write('----------\n')
        #DA^+
        fw.write('0.0\n')
        fw.write('1.0  1  %d\n' %FRGM.natoms_frgm[0])
        fw.write('0.0\n')
        fw.write('1.0  1  %d  s\n' %FRGM.natoms_frgm[0])
    else:
        #D^-A
        fw.write('1.0\n')
        fw.write('1.0  1  %d\n' %FRGM.natoms_frgm[0])
        fw.write('1.0\n')
        fw.write('1.0  1  %d  s\n' %FRGM.natoms_frgm[0])
        fw.write('----------\n')
        #DA^+
        fw.write('0.0\n')
        fw.write('1.0  1  %d\n' %FRGM.natoms_frgm[0])
        fw.write('0.0\n')
        fw.write('1.0  1  %d  s\n' %FRGM.natoms_frgm[0])
    fw.write('$end\n\n')

def Append_MSDFT_Section(fw, FRGM, options):
    fw.write('\n')
    fw.write('$almo_coupling\n')
    if FRGM.mult_frgm[0] == 1 and FRGM.mult_frgm[1] == 1: #starting from closed-shell
       if not options.spin_adapt > 0: 
          fw.write("%d  1\n" %FRGM.charge_frgm[0])
          fw.write("%d  1\n" %FRGM.charge_frgm[1])
          fw.write("--\n")
          fw.write("%d  2\n"  %(FRGM.charge_frgm[0]+1))
          fw.write("%d  -2\n" %(FRGM.charge_frgm[1]-1))
       else:
          fw.write("%d  1\n" %FRGM.charge_frgm[0])
          fw.write("%d  1\n" %FRGM.charge_frgm[1])
          fw.write("--\n")
          fw.write("%d  1\n" %FRGM.charge_frgm[0])
          fw.write("%d  1\n" %FRGM.charge_frgm[1])
          fw.write("--\n")
          fw.write("%d  -2\n"  %(FRGM.charge_frgm[0]+1))
          fw.write("%d  2\n" %(FRGM.charge_frgm[1]-1))
          fw.write("--\n")
          fw.write("%d  2\n"  %(FRGM.charge_frgm[0]+1))
          fw.write("%d  -2\n" %(FRGM.charge_frgm[1]-1))
    else:
       #hard-coded for two states
       fw.write("%d  %d\n" %(FRGM.charge_frgm[0], FRGM.mult_frgm[0]))
       fw.write("%d  %d\n" %(FRGM.charge_frgm[1], FRGM.mult_frgm[1]))
       fw.write("--\n")
       fw.write("%d  %d\n" %(FRGM.charge_frgm[1], FRGM.mult_frgm[1]))
       fw.write("%d  %d\n" %(FRGM.charge_frgm[0], FRGM.mult_frgm[0]))
    fw.write('$end\n')


def XYZ_to_Input(fw, XYZ, FRGM, curREM, diabat, options):
    if diabat.upper() == "POD":
        qmol.WriteMolecule_Frgm(fw, XYZ, FRGM)
        qrems.ModRem('FRAG_DIABAT_METHOD', 'POD', curREM)
        if options.do_ET:
            qrems.ModRem('FRAG_DIABAT_DOHT', 'FALSE', curREM)
        qrems.AppendRem(fw, curREM)
    elif diabat.upper() == 'ESID':
        qmol.WriteMolecule_Frgm(fw, XYZ, FRGM)
        qrems.ModRem('FRAG_DIABAT_METHOD', 'ESID', curREM)
        qrems.ModRem('SCF_GUESS', 'FRAGMO', curREM)
        if options.do_ET:
            qrems.ModRem('FRAG_DIABAT_DOHT', 'FALSE', curREM)
        qrems.AppendRem(fw, curREM)
    elif diabat.upper() == "CDFT":
        qmol.WriteMolecule(fw, XYZ, FRGM.total_charge, FRGM.total_mult)
        qrems.ModRem('UNRESTRICTED', 'TRUE', curREM)
        qrems.AppendRem(fw, curREM)
        Append_CDFT_Section(fw, FRGM, options.do_ET)
    elif diabat.upper() == "FODFT":
        qmol.WriteMolecule_Frgm(fw, XYZ, FRGM)
        qrems.ModRem('FRAG_DIABAT_METHOD', 'FODFT', curREM)
        qrems.ModRem('FODFT_METHOD', str(options.fodft_method), curREM)
        qrems.ModRem('UNRESTRICTED', 'TRUE', curREM)
        qrems.ModRem('SCFMI_MODE', '1', curREM)
        if options.do_ET:
            qrems.ModRem('FRAG_DIABAT_DOHT', 'FALSE', curREM)
        if options.ex_almo != None:
            qrems.ModRem('SCFMI_MOM', 'TRUE', curREM)
            qrems.ModRem('MOM_METHOD', 'IMOM', curREM)
        qrems.AppendRem(fw, curREM)
        if options.ex_almo != None:
            qrems.copy_section_over(fw, options.ex_almo)
    elif diabat.upper() == 'MSDFT':
        qmol.WriteMolecule_Frgm(fw, XYZ, FRGM)
        qrems.ModRem('UNRESTRICTED', 'TRUE', curREM)
        qrems.ModRem('FRAG_DIABAT_METHOD', 'ALMO_MSDFT', curREM)
        qrems.ModRem('MSDFT_METHOD', str(options.msdft_method), curREM)
        qrems.ModRem('SCFMI_MODE', '1', curREM)
        qrems.ModRem('FRGM_METHOD', 'STOLL', curREM)
        qrems.ModRem('SCF_PRINT_FRGM', 'TRUE', curREM)
        if options.ex_almo != None:
            qrems.ModRem('SCFMI_MOM', 'TRUE', curREM)
            qrems.ModRem('MOM_METHOD', 'IMOM', curREM)
        qrems.AppendRem(fw, curREM)
        Append_MSDFT_Section(fw, FRGM, options)
        if options.ex_almo != None:
            Append_Dev_Section(fw, diabat, options)
            qrems.copy_section_over(fw, options.ex_almo)
        if options.pinv > 0:
            Append_Dev_Section(fw, diabat, options)
    else:
        print "Unrecognized diabatization method"
        sys.exit(0)

     
def locate_frgm_file(xyz_file, frgm_path):
    if frgm_path[-5:] == '.frgm': #single .frgm file
        return frgm_path
    else:
        nameroot = re.search('/([^/]+)_dist', xyz_file).group(1)
        return frgm_path+'/'+nameroot+'.frgm'
    
def add_diabat_scheme_to_inputname(inputname, diabat, options):
    if diabat.upper() == 'POD':
        inputname += '_pod_'
    elif diabat.upper() == 'ESID':
        inputname += '_esid_'
    elif diabat.upper() == 'CDFT':
        inputname += '_cdft_'
    elif diabat.upper() == 'MSDFT':
        if options.msdft_method == 1:
            inputname += '_msdft1_'
        else:
            inputname += '_msdft2_'
    elif diabat.upper() == 'FODFT':
        if options.fodft_method == 1:
            if options.do_ET:
                inputname += '_fodft-2n+1_'
            else:
                inputname += '_fodft+2n-1_'
        elif options.fodft_method == 2:
            inputname += '_fodft2n_'
        elif options.fodft_method == 3:
            if options.do_ET:
                inputname += '_fodft2n+1_'
            else:
                inputname += '_fodft2n-1_'
    return inputname

#The script
options, args = ParseInput(sys.argv)
xyz_path = args[1]
frgm_path = args[2]
if xyz_path[-1] != '/':
    xyz_path += '/'
if frgm_path[-1] == '/':
    frgm_path = frgm_path[:-1]
print frgm_path

curdir = os.getcwd()
xyzfile_list = []
if options.all:
    xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
    xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target != None:
    for xyz_file in options.target:
        if xyz_file not in xyzfile_list:
            xyzfile_list.append(xyz_file)
print xyzfile_list

input_path = options.input_path
if input_path[-1:] != '/':
    input_path += '/'
if not os.path.exists(input_path):
    sp.call(['mkdir', input_path])

print "list of diabatization method: "+str(options.diabat)

for diabat in options.diabat: #loop over diabat schemes
    if diabat.upper() == 'CDFT':
        rem_file = os.path.expandvars('$QREMPATH')+'/'+'rem_cdftci'
    elif diabat.upper() == 'MSDFT' or diabat.upper() == 'NOCI-DFT':
        rem_file = os.path.expandvars('$QREMPATH')+'/'+'rem_scfmi'
    else:
        rem_file = os.path.expandvars('$QREMPATH')+'/'+'rem_stdscf'
    myrems = qrems.ParseRems(rem_file)
    for method in options.method:
        for basis in options.basis:
            qrems.set_rems_common(myrems, method, basis)
            for xyz_file in xyzfile_list:
                parsed_XYZ = qmol.XYZ(xyz_file)
                FRGM = qmol.FRGM(locate_frgm_file(xyz_file, frgm_path))
                if qmol.detect_unrestricted_frgm(FRGM):
                    qrems.ModRem('UNRESTRICTED', 'TRUE', myrems)
                inputfile = input_path+parsed_XYZ.Name
                if options.ex_almo != None:
                    inputfile += "_ex"
                inputfile = add_diabat_scheme_to_inputname(inputfile, diabat, options)
                inputfile += method + '_' + qrems.basis_abbr(basis)+'.in'
                #print "generating "+inputfile
                fw = open(inputfile, 'w')
                XYZ_to_Input(fw, parsed_XYZ, FRGM, myrems, diabat, options)
                fw.close()
