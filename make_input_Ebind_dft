#! /usr/bin/env python3

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
   UseMsg = '''
   python make_input_E_bind.py [options] [xyz_path] [frgm_partition]
   ''' 
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback_space,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('--onsite',dest='onsite',action='store_true',default=False,help='frgm file and xyz file under the same dir and sharing the same nameroot')
   parser.add_option('--nocp',dest='nocp',action='store_true',default=False,help='skip counterpoise corrections')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
   parser.add_option('-m','--method',dest='method',action='callback',type='string', default=None, callback=string_sp_callback,help='The methods (density functionals) to use')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--pcm',dest='pcm',action='store',type='string',default=None,help='turn on pcm and specify the file for pcm')
   options, args = parser.parse_args(ArgsIn)

   if not options.onsite:
      if len(args) < 3:
         parser.print_help()
         sys.exit(1)
   else:
      if len(args) < 2:
         parser.print_help()
         sys.exit(1)

   if not options.all and options.target==None and options.keyword==None:
      print("The target directory must be specified: one or some or all")
      parser.print_help()
      sys.exit(1)

   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def string_sp_callback_space(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(' '))

def XYZ_to_Input(fw, XYZ, FRGM, curREM, doCP, pcm_file=None):
   #print "generate %s" %inputfile
   #write isolated frgm jobs 
   #Order: Frag A, Frag A (with ghost); Frag B, Frag B (with ghost)
   for index_frgm in range(0,FRGM.n_frgm):
      if FRGM.mult_frgm[index_frgm] > 1:
         qrems.ModRem('UNRESTRICTED','TRUE',curREM)
      else:
         qrems.ModRem('UNRESTRICTED','FALSE',curREM)
      qmol.WriteMolecule_supersub(fw, XYZ, FRGM, index_frgm+1)
      qrems.AppendRem(fw, curREM)
      if pcm_file != None:
         qrems.copy_section_over(fw, pcm_file)
      fw.write('\n@@@\n')
      if doCP:  #do CP correction
         qmol.WriteMolecule_supersub(fw, XYZ, FRGM, index_frgm+1,ghost=True)
         qrems.AppendRem(fw, curREM)
         if pcm_file != None:
            qrems.copy_section_over(fw, pcm_file)
         fw.write('\n@@@\n')
   #write the supersystem job
   if FRGM.total_mult > 1:
      qrems.ModRem('UNRESTRICTED', 'TRUE', curREM)
   else:
      qrems.ModRem('UNRESTRICTED', 'FALSE', curREM)
   qmol.WriteMolecule_supersub(fw, XYZ, FRGM)
   qrems.AppendRem(fw, curREM)
   if pcm_file != None:
      qrems.copy_section_over(fw, pcm_file)


#the script 
options, args = ParseInput(sys.argv)
xyz_path = args[1]

frgm_partition = ''
if not options.onsite:
   frgm_partition = args[2]
if xyz_path[-1:] != '/':
   xyz_path += '/'

rem_file = os.path.expandvars('$QREMPATH')+'/'+'rem_stdscf'
curREM = qrems.ParseRems(rem_file)

#determine xyz_file list
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

#parse the fragment file
FRGM = ''
if not options.onsite:   #all xyz files share the common frgm file: parse it beforehand
   FRGM = qmol.FRGM(frgm_partition)

#create the input file, and move it into the input_path
for method in options.method:
   for basis in options.basis: 
      qrems.set_rems_common(curREM, method, basis) 
      if options.pcm != None:
         qrems.ModRem('SOLVENT_METHOD', 'PCM', curREM)
      for xyz_file in xyzfile_list:
         parsed_XYZ = qmol.XYZ(xyz_file)
         if options.onsite:
            frgm_file = xyz_file[:-4]+'.frgm'
            FRGM = qmol.FRGM(frgm_file)
         inputfile = input_path+parsed_XYZ.Name+'_'+method+'_'+qrems.basis_abbr(basis)+'.in'
         fw = open(inputfile, 'w')
         XYZ_to_Input(fw, parsed_XYZ, FRGM, curREM, not(options.nocp), options.pcm)
         fw.close()
