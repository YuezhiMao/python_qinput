#! /usr/bin/env python3

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
   UseMsg = '''
   make_input_sp_geom [options] [xyz_path]
   '''
   parser = OptionParser(usage=UseMsg)
   parser.add_option('--opt',dest='opt',action='store_true',default=False,help='doing geometry optimization')
   parser.add_option('--freq',dest='freq',action='store_true',default=False,help='doing harmonic frequency calculation')
   parser.add_option('--opt_freq',dest='opt_freq',action='store_true',default=False,help='doing geometry optimization followed by harmonic frequency calculation')
   parser.add_option('--force',dest='force',action='store_true',default=False,help='doing force calculaiton')
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
   parser.add_option('-m','--method',dest='method',action='callback',type='string', default=None, callback=string_sp_callback,help='The methods (density functionals) to use')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--charge',dest='charge',action='store',type='int',default=0,help='total charge of the system')
   parser.add_option('--mult',dest='mult',action='store',type='int',default=1,help='total multiplicity of the system') 
   parser.add_option('--sol',dest='sol',action='store',type='string',default=None,help='specify the solvent model to use')
   parser.add_option('--sol_file', dest='sol_file', action='store', type='string', default=None, help='file for the solvent model input section')
   parser.add_option('--geom_constr', dest='geom_constr', action='store', default=None, type='string', help='specify the template file for adding geometry optimization constraint')
   parser.add_option('--constr_key',dest='constr_key',action='store',default='dist',type='string',help='specify the key in the XYZ file for the constraint value')
   parser.add_option('--tight',dest='tight',action='store_true',default=False,help='use tigher criterion for geom opt convergence')
   parser.add_option('--coarse',dest='coarse',action='store',type='int',default=0,help='use less tight integral thresh and less fine grid for SCF calculations')
   parser.add_option('--sym',dest='sym',action='store_true',default=False,help='use sym_ignore = false for geom opt')
   parser.add_option('--mem_total',dest='mem_total',action='store',type='int',default=-1,help='set mem_total (no smaller than 8000 MB)')
   parser.add_option('--stab',dest='stab',action='store_true',default=False,help='use gdm algorithm and turn on stability analysis')
   parser.add_option('--efield',dest='efield',action='store_true',default=False,help='calculate electric field on atomic positions or on grid points')
   parser.add_option('--dipole_field',dest='dipole_field',action='store',type='int',default=None,help='apply a dipolar field along X/Y/Z direction (in MV/cm)')
   parser.add_option('--field_dir',dest='field_dir',action='store',type='string',default='Z',help='The direction of the applied field (default: Z)')
   parser.add_option('--isotope',dest='isotope',action='store',type='string',default=None,help='Doing isotope substitution for vib analysis; specify the file for isotope section')
   parser.add_option('--cdft',dest='cdft',action='store',type='string',default=None,help='Doing CDFT; specify the $cdft section')
   parser.add_option('--pop_anal',dest='pop_anal',action='callback',callback=string_sp_callback,type='string',default=None,help='specify population analysis schemes to run')

   options, args = parser.parse_args(ArgsIn)
   if len(args) < 2 and (options.all or options.keyword!=None):
      parser.print_help()
      sys.exit(0)
   if not options.all and options.target==None and options.keyword==None:
      print("The target directory must be specified: one or some or all")
      parser.print_help()
      sys.exit(1)
   if options.sol_file != None and (not os.path.exists(options.sol_file)):
      print("Specified sol_file does not exist")
      sys.exit(0)
   if options.field_dir.upper() != 'X' and options.field_dir.upper() != 'Y' and options.field_dir.upper() != 'Z':
      print ("Invalid specification of dipole field direction: %s" %options.field_dir)
      sys.exit(0)
   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def append_single_geom_constraint(fw, constraint_template, XYZ, placeholder):
   l = re.search(placeholder+'_([^_]+)_', XYZ.Name)
   if l == None:
      print("No geom_param specified in xyz file name. Try different placeholder or you are fucked")
      sys.exit(0)
   geom_param = float(l.group(1))
   qrems.apply_single_geom_constraint(fw, geom_param, constraint_template)

def XYZ_to_Input(fw, XYZ, curREM, options):
   qmol.WriteMolecule(fw, XYZ, options.charge, options.mult)
   qrems.AppendRem(fw, curREM)
   if options.geom_constr != None:
      append_single_geom_constraint(fw, options.geom_constr, XYZ, options.constr_key)
   if options.sol_file != None:
      qrems.copy_section_over(fw, options.sol_file)
   if options.dipole_field != None and options.dipole_field != 0:
      qrems.apply_dipolar_field(fw, options.dipole_field, options.field_dir)
   if options.freq and options.isotope:
      qrems.copy_section_over(fw, options.isotope)
   if options.cdft:
      qrems.copy_section_over(fw, options.cdft)

def XYZ_to_Input_optfreq(fw, XYZ, curREM, options):
   #geom opt job
   XYZ_to_Input(fw, XYZ, curREM, options)
   #freq job
   fw.write("\n@@@\n\n")
   qmol.WriteMolecule_Read(fw)
   qrems.ModRem('JOBTYPE', 'FREQ', curREM)
   qrems.ModRem('SCF_GUESS', 'READ', curREM)
   if (options.dipole_field != None and options.dipole_field != 0) or options.cdft != None:
      qrems.ModRem('IDERIV', '1', curREM)
   if options.isotope != None:
      qrems.ModRem('ISOTOPES', 'TRUE', curREM)
   qrems.AppendRem(fw, curREM)
   if options.sol_file != None:
      qrems.copy_section_over(fw, options.sol_file)
   if options.dipole_field != None and options.dipole_field != 0:
      qrems.apply_dipolar_field(fw, options.dipole_field, options.field_dir)
   if options.isotope:
      qrems.copy_section_over(fw, options.isotope)
   if options.cdft:
      qrems.copy_section_over(fw, options.cdft)

def set_gs_rems(curREM, options):
   if options.opt or options.opt_freq: #the latter also starts with OPT
      qrems.ModRem('JOBTYPE', 'OPT', curREM)
      qrems.ModRem('GEOM_OPT_MAX_CYCLES', '200', curREM)
      qrems.ModRem('GEOM_OPT_DRIVER', 'OPTIMIZE', curREM)
   elif options.force:
      qrems.ModRem('JOBTYPE', 'FORCE', curREM)
   elif options.freq:
      qrems.ModRem('JOBTYPE', 'FREQ', curREM)
      if options.isotope != None:
         qrems.ModRem('ISOTOPES', 'TRUE', curREM)
      if (options.dipole_field != None and options.dipole_field != 0) or options.cdft != None:
         qrems.ModRem('IDERIV', '1', curREM)
   if options.mem_total > 8000:
      qrems.ModRem('MEM_TOTAL', str(options.mem_total), curREM)
   if options.tight:
      set_tight_opt_criterion(curREM)
   if options.sym:
      qrems.ModRem('SYM_IGNORE', 'FALSE', curREM)
   if options.sol != None:
      qrems.ModRem('SOLVENT_METHOD', options.sol, curREM)
   if options.stab:
      qrems.ModRem('SCF_ALGORITHM', 'GDM', curREM)
      qrems.ModRem('INTERNAL_STABILITY', 'TRUE', curREM)
   if options.efield:
      qrems.ModRem('ESP_GRID', '0', curREM)
      qrems.ModRem('ESP_EFIELD', '1', curREM)
   if options.cdft != None:
      set_cdft_rems(curREM)
   if options.pop_anal != None:
      qrems.set_popanal_rems(curREM, options.pop_anal)

def set_tight_opt_criterion(curREM):
   qrems.ModRem('GEOM_OPT_TOL_GRADIENT','100', curREM)
   qrems.ModRem('GEOM_OPT_TOL_DISPLACEMENT', '100', curREM)
   qrems.ModRem('GEOM_OPT_TOL_ENERGY', '10', curREM)

def set_cdft_rems(curREM):
   qrems.ModRem('CDFT', 'TRUE', curREM)
   qrems.ModRem('CDFT_THRESH', '6', curREM)
   qrems.ModRem('BECKE_SHIFT', 'UNSHIFTED', curREM)


options, args = ParseInput(sys.argv)
xyz_path =''
if len(args) > 1:
   xyz_path = args[1]
   if xyz_path[-1:] != '/':
      xyz_path += '/'

#determine xyz_file
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

rem_file = os.path.expandvars('$QREMPATH')+'/rem_stdscf'
myrems = qrems.ParseRems(rem_file)


for method in options.method:
   for basis in options.basis:
      qrems.set_rems_common(myrems, method, basis, options.coarse) #see the function in qrems for details
      set_gs_rems(myrems, options)
      for xyz_file in xyzfile_list:
         parsed_XYZ = qmol.XYZ(xyz_file)
         inputfile = input_path + parsed_XYZ.Name  #common piece
         if options.cdft != None:
            inputfile += '_cdft'
         if options.dipole_field != None:
            if options.dipole_field > 0:
               inputfile += '_+'+str(options.dipole_field)+'.in'
            elif options.dipole_field == 0:
               inputfile += '_0.in'
            else:
               inputfile += '_'+str(options.dipole_field)+'.in'
         else:
            if options.opt:
               inputfile += '_geom_'+method+'_'+qrems.basis_abbr(basis)+'.in'
            elif options.freq:
               inputfile += '_freq_'+method+'_'+qrems.basis_abbr(basis)+'.in'
            elif options.opt_freq:
               inputfile += '_optfreq_'+method+'_'+qrems.basis_abbr(basis)+'.in'
            else:
               inputfile += '_'+method+'_'+qrems.basis_abbr(basis)+'.in'
         fw = open(inputfile, 'w')
         if options.opt_freq:
            XYZ_to_Input_optfreq(fw, parsed_XYZ, myrems, options)
         else:
            XYZ_to_Input(fw, parsed_XYZ, myrems, options)
         fw.close()
