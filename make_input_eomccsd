#! /usr/bin/env python

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
   UseMsg = '''
   make_input_sp_geom [options] [xyz_path]
   '''
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--force', dest='force', action='store', type='string', default=None, help='doing EOM-CCSD force for the specified state (for $rem variable CC_STATE_TO_OPT)')
   parser.add_option('--charge',dest='charge',action='store',type='int',default=0,help='total charge of the system')
   parser.add_option('--mult',dest='mult',action='store',type='int',default=1,help='total multiplicity of the system') 
   parser.add_option('--ip',dest='eomip',action='store',type='string',default=None,help='number of EOM-IP states')
   parser.add_option('--sf',dest='eomsf',action='store',type='string',default=None,help='number of EOM-SF states')
   parser.add_option('--ee',dest='eomee',action='store',type='string',default=None,help='number of EOM-EE states')
   parser.add_option('--ea',dest='eomea',action='store',type='string',default=None,help='number of EOM-EA states')
   parser.add_option('--gs',dest='gs',action='store_true',default=False,help='do ground state CCSD')
   parser.add_option('--state_prop',dest='state_prop',action='store_true',default=False,help='calculating excited state properties')
   parser.add_option('--trans_prop',dest='trans_prop',type='int',action='store',default=0,help='value for cc_trans_prop (1: gs-ex; 2: ex-ex; 3: all)')
   parser.add_option('--act_virt',dest='act_virt',action='store',type='int',default=0,help='number of active virts')
   parser.add_option('--tot_virt',dest='tot_virt',action='store',type='int',default=0,help='total number of virts')
   parser.add_option('--cc_mem',dest='cc_mem',action='store',type='int',default=16000,help='value of CC memory')
   parser.add_option('--cc_sp',dest='cc_sp',action='store_true',default=False,help='doing CCMAN2 with single-precision (recommended by Anna Krylov')
   parser.add_option('--sym',dest='sym',action='store_true',default=False,help='running job with sym_ignore = false')
   parser.add_option('--thresh',dest='thresh',action='store',type='int',default=14,help='set integral thresh (default 14)')

   options, args = parser.parse_args(ArgsIn)
   if len(args) < 2 and (options.all or options.keyword!=None):
      parser.print_help()
      sys.exit(0)
   if not options.all and options.target==None and options.keyword==None:
      print("The target directory must be specified: one or some or all")
      parser.print_help()
      sys.exit(1)
   if not (options.eomip != None or options.eomsf != None or options.eomee != None or options.eomea != None or options.gs):
      print("At least specify one type of excited states (or GS)")
      parser.print_help()
      sys.exit(1)
   if options.act_virt > 0 and (options.act_virt > options.tot_virt):
      print("Active virt: %d, Total virt: %d" %(options.act_virt, options.tot_virt))
      print("Invalid number of active virtuals")
      sys.exit(1)

   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def XYZ_to_Input(fw, XYZ, curREM, options):
   qmol.WriteMolecule(fw, XYZ, options.charge, options.mult)
   qrems.AppendRem(fw, curREM)

def set_rems_ccsd(myrems, options):
   if options.force != None:
      qrems.ModRem('JOBTYPE', 'FORCE', myrems)
      qrems.ModRem('SCF_CONVERGENCE', '9', myrems)
   if options.state_prop:
      qrems.ModRem('CC_REF_PROP', 'TRUE', myrems)
   if options.act_virt > 0:
      n_frozen = options.tot_virt - options.act_virt
      qrems.ModRem('N_FROZEN_VIRTUAL', str(n_frozen), myrems)
   if options.cc_sp:
      qrems.ModRem('CC_SINGLE_PREC', '1', myrems)
      qrems.ModRem('CC_SP_DM', '1', myrems)
      qrems.ModRem('CC_SP_T_CONV', '4', myrems)
      qrems.ModRem('CC_SP_E_CONV', '6', myrems)
      qrems.ModRem('CC_ERASE_DP_INTEGRALS', '1', myrems)
   if options.sym:
      qrems.ModRem('SYM_IGNORE', 'FALSE', myrems)
      
   qrems.ModRem('CC_MEMORY', str(options.cc_mem), myrems)
   qrems.ModRem('MEM_TOTAL', str(options.cc_mem+2000), myrems)
   qrems.ModRem('THRESH', str(options.thresh), myrems)

def set_rems_eomccsd(myrems, options):
   if options.eomip != None:
      qrems.ModRem('IP_STATES', str(options.eomip), myrems)
   if options.eomsf != None:
      if options.mult == 1 or options.mult == 2: #not specified, not suitable for SF
         options.mult += 2
      qrems.ModRem('SF_STATES', str(options.eomsf), myrems)
   if options.eomee != None:
      qrems.ModRem('EE_STATES', str(options.eomee), myrems)
   if options.eomea != None:
      qrems.ModRem('EA_STATES', str(options.eomea), myrems)

   if options.sym:
      qrems.ModRem('SYM_IGNORE', 'FALSE', myrems)
   if options.force != None:
      qrems.ModRem('JOBTYPE', 'FORCE', myrems)
      qrems.ModRem('SCF_CONVERGENCE', '9', myrems)
      qrems.ModRem('CC_STATE_TO_OPT', options.force, myrems)
   if options.state_prop:
      qrems.ModRem('CC_EOM_PROP', 'TRUE', myrems)
   if options.trans_prop > 0:
      qrems.ModRem('CC_TRANS_PROP', str(options.trans_prop), myrems)

   if options.act_virt > 0:
      n_frozen = options.tot_virt - options.act_virt
      qrems.ModRem('N_FROZEN_VIRTUAL', str(n_frozen), myrems)

   if options.cc_sp:
      qrems.ModRem('CC_SINGLE_PREC', '1', myrems)
      qrems.ModRem('EOM_SINGLE_PREC', '1', myrems)
      qrems.ModRem('CC_SP_DM', '1', myrems)
      qrems.ModRem('EOM_ARESP_SINGLE_PREC', '1', myrems)
      qrems.ModRem('CC_SP_T_CONV', '4', myrems)
      qrems.ModRem('CC_SP_E_CONV', '6', myrems)
      qrems.ModRem('CC_ERASE_DP_INTEGRALS', '1', myrems)
      
   qrems.ModRem('CC_MEMORY', str(options.cc_mem), myrems)
   qrems.ModRem('MEM_TOTAL', str(options.cc_mem+2000), myrems)
   qrems.ModRem('THRESH', str(options.thresh), myrems)

options, args = ParseInput(sys.argv)
xyz_path =''
if len(args) > 1:
   xyz_path = args[1]
   if xyz_path[-1:] != '/':
      xyz_path += '/'

#determine xyz_file
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

if options.gs:
   rem_file = os.path.expandvars('$QREMPATH')+'/rem_ccsd'
else:
   rem_file = os.path.expandvars('$QREMPATH')+'/rem_eomccsd'
myrems = qrems.ParseRems(rem_file)

if options.eomip != None:
   ex_method = 'eomip'
elif options.eomsf != None:
   ex_method = 'eomsf'
elif options.eomea != None:
   ex_method = 'eomea'
elif options.eomee != None:
   ex_method = 'eomee'
else:
   ex_method = 'gs'
if options.act_virt > 0:
   ex_method += '_v'+str(options.act_virt)

if options.gs:
   method = 'ccsd'
else:
   method = 'eom-ccsd'
for basis in options.basis:
   qrems.set_rems_common(myrems, method, basis)
   if options.gs:
      set_rems_ccsd(myrems, options)
   else:
      set_rems_eomccsd(myrems, options)
   for xyz_file in xyzfile_list:
      parsed_XYZ = qmol.XYZ(xyz_file)
      inputfile = input_path+parsed_XYZ.Name+'_'+ex_method+'_ccsd_'+qrems.basis_abbr(basis)+'.in' 
      fw = open(inputfile, 'w')
      XYZ_to_Input(fw, parsed_XYZ, myrems, options)
      fw.close()
