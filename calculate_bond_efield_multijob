#! /usr/bin/env python

import os, sys, re, glob
import xyzgeom, efield
import numpy as np
import subprocess as sp
from optparse import OptionParser

def ParseInput(ArgsIn):
   UseMsg = "python [script] [options] [outdir] [xyzgeom_dir]"
   parser = OptionParser(usage=UseMsg)
   parser.add_option('--bond_atoms', dest='bond_atoms', action='callback', type='string', callback=string_sp_callback, default=None, help='specify the two bond atoms')
   parser.add_option('--method',dest='method',action='store',type='string',default='frozen_orb',help='The method used to calculate E-field. Options: frozen_orb (default); almo')
   parser.add_option('--index_key',dest='index_key',action='store',type='string',default='dist',help='String keyword before the index (default: dist)')
   parser.add_option('--index_type',dest='index_type',action='store',type='string',default='float',help='data type of the index (default: float)')
   options, args = parser.parse_args(ArgsIn)
   if options.bond_atoms == None:
      print ("The two bond atoms must be specified")
      parser.print_help()
      sys.exit(0)
   if len(sys.argv) < 3:
      parser.print_help()
      sys.exit(0)

   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

options, args = ParseInput(sys.argv)
outdir = args[1]
xyzgeom_dir = args[2]
if outdir[-1] == "/":
   outdir = outdir[:-1]
if xyzgeom_dir[-1] == "/":
   xyzgeom_dir = xyzgeom_dir[:-1]
bond_idx1, bond_idx2 = int(options.bond_atoms[0]), int(options.bond_atoms[1])

outfile_list = glob.glob(outdir+"/*.out")
data_efield = {}
for outfile in outfile_list:
   xyzfile = xyzgeom_dir + "/" + re.search(outdir+"\/(\S+)_"+options.method, outfile).group(1) + ".xyz"
   if options.index_type == 'int':
      index = int(re.search(options.index_key+"([^_]+)_", outfile).group(1)) 
   else:
      index = float(re.search(options.index_key+"([^_]+)_", outfile).group(1)) 
   data_efield[index] = {}
   data_efield[index]["efield_avg"] = efield.calculate_efield_on_bond(outfile, xyzfile, bond_idx1, bond_idx2)
   data_efield[index]["efield_esp"] = efield.calculate_efield_from_esp(outfile, xyzfile, bond_idx1, bond_idx2)

fw = open(outdir+"/efield_scan.csv", "w")  
fw.write("index,efield_avg,efield_esp\n")
for index in sorted(data_efield):
   if options.index_type == 'int':
      fw.write("%d,%.3f,%.3f\n" %(index, data_efield[index]["efield_avg"], data_efield[index]["efield_esp"]))
   else:
      fw.write("%.2f,%.3f,%.3f\n" %(index, data_efield[index]["efield_avg"], data_efield[index]["efield_esp"]))
fw.close()
