#! /usr/bin/env python

import os, glob, re, sys, csv
import subprocess as sp
from optparse import OptionParser

def ParseInput(ArgsIn):
   UseMsg = "python get_geom.py [options] [result_dir]\nExample for a result dir: reoptimized_geoms/"
   parser = OptionParser(UseMsg)
   parser.add_option('-a','--all',dest='all', action='store_true', default=False, help='manipulate all the output directories under the folder \"result\"')
   parser.add_option('-t','--target', dest='target', action='callback', callback=string_sp_callback, type='string', default=None, help='the output directory (only one) to manipulate')
   parser.add_option('-k','--keyword', dest='keyword', action='store', type='string', default=None, help='search for all matching output direcotries based on the keyword and manipulate them')
   parser.add_option('-f','--format',dest='format', action='store', type='string', default='xyz', help='the format of geometry files (xyz or gzmat)')
   parser.add_option('--pes',dest='pes',action='store_true',default=False,help='optimize geometry for PES scan')
   parser.add_option('--snapshot',dest='snap',action='store_true',default=False,help='optimized geometry for different configurations (specified by integers)')
   parser.add_option('--placeholder',dest='placeholder',action='store',type='string',default='dist',help='placeholder to get the geom param')
   parser.add_option('--do_freq',dest='do_freq',action='store_true',default=False,help='parse the vibrational frequencies')
   parser.add_option('--intens',dest='intensity',action='store_true',default=False,help='parse the IR intensities together with the frequencies')
   parser.add_option('--n_imag',dest='n_imag',action='store_true',default=False,help='count the number of imaginary frequencies')
   parser.add_option('--sorted',dest='sorted',action='store',type='string',default=None,help='sort the output based on a given criteria: [given_str]_[sort_key]_')
   parser.add_option('--reverse_order',dest='reverse_order',action='store_true',default=False,help='sort the output name in the reverse order')
   parser.add_option('--modelchem',dest='modelchem',action='store_true',default=False,help='parse the model chemistry')
   parser.add_option('--multigeom',dest='multigeom',action='store',type='int',default=None,help='get multiple geometries')
   parser.add_option('--adiab_eda',dest='adiab_eda',action='store_true',default=False,help='split output as adiabatic eda results')
   options, args=parser.parse_args(ArgsIn)
   if len(args) < 2 and options.target==None:
      print("Specify the directory that stores all the results")
      parser.print_help()
      sys.exit(1)
   if not options.all and options.target==None and options.keyword==None: 
      print("The target directory or keyword must be specified")
      parser.print_help()
      sys.exit(1)
   if options.format!='xyz' and options.format!='gzmat':
      print("The specified format of geometry files is not recognized")
      parser.print_help()
      sys.exit(1)
   if options.intensity and not options.do_freq:
      print("Can't request intensity without parsing frequency")
      parser.print_help()
      sys.exit() 
   if options.n_imag and not options.do_freq:
      print("Can't figure out the number of imaginary frequencies without parsing frequency")
      parser.print_help()
      sys.exit()
   if options.adiab_eda and options.multigeom!=3:
      print("Warning: set multigeom = 3 for adiabatic EDA")
      options.multigeom = 3

   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def manipulate_one_folder(target_path, options):
   print("manipulating directory %s" %target_path)
   cur_dir = os.getcwd()
   os.chdir(target_path)
   get_energy(options)
   if options.do_freq:
      #get_frequency(options)
      get_frequency_new(options)
   out_list = glob.glob('*.out')
   if not os.path.exists("geometry"):
      sp.call(['mkdir', 'geometry'])
   for out in out_list:
      if options.format.lower()=='xyz':
         if (not options.adiab_eda) or ('adiabatic_eda' not in out):
            xyz_file = get_xyz(out, options)
            sp.call(['mv',xyz_file,'geometry/'])
         else:
            xyz_files = get_xyz_adiab_eda(out, options)
            for xyz_file in xyz_files:
               sp.call(['mv', xyz_file, 'geometry/'])
      
      elif options.format.lower()=='gzmat':
         gzmat_file = get_gzmat(out)
         sp.call(['mv',gzmat_file,'geometry/'])
    
   os.chdir(cur_dir)

def manipulate_folder_modelchem(target_path, options):
   print("manipulating directory %s" %target_path)
   cur_dir = os.getcwd()
   os.chdir(target_path)
   datapoint = initialize_datapoint(options)
   get_energy_modelchem(datapoint, options)
   get_xyz_modelchem(datapoint, options)
   if options.do_freq:
      get_frequency_modelchem(datapoint, options)
   if options.n_imag:
      get_n_imaginary(datapoint)

   modelchem_based_print(datapoint, options)
   modelchem_sorted_geometry(datapoint)

def get_xyz(output_file, options):
   name = output_file[:-4]
   tmp_file = name+'.tmp'
   xyz_file = name+'.xyz'
   #os.system('grep -B 100 "OPTIMIZATION CONVERGED" '+output_file+' | grep -A 1000 "Coordinates (Angstroms)" | grep -B 1000 Point | grep -A 1000 ATOM | grep -v ATOM | grep -v Point | awk \'{print $2, $3, $4, $5}\' > '+tmp_file)
   #os.system('grep -A 100 "OPTIMIZATION CONVERGED" '+output_file+' | grep -B 100 "Z-matrix" | grep -A 500 "ATOM" | grep -v "ATOM" | grep -v "Print" > '+tmp_file)
   command = "sed -n " + "'/OPTIMIZATION CONVERGED/,/Z-matrix/p' " + output_file + " > "+tmp_file
   os.system(command)
   fr = open(tmp_file, 'r')
   AtomList =  []
   CoordList = []
   all_lines = fr.readlines()
   for line in all_lines:
      l = re.search('^\s*(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s*$', line)
      if l!=None:
         AtomList.append(l.group(2))
         CoordList.append((float(l.group(3)), float(l.group(4)), float(l.group(5))))
   fr.close()
   sp.call(['rm', tmp_file])
   fw = open(xyz_file, 'w')
   if (not options.multigeom) or ('adiabatic' not in name):
      NAtom = len(AtomList)
      fw.write("%d\n\n" %NAtom) #NAtom
      for index in range(0, NAtom):
         atomic_symbol = AtomList[index]
         x,y,z = CoordList[index]
         fw.write("%-2s %14.10f %14.10f %14.10f\n" %(atomic_symbol,x,y,z))
      fw.close()
   else:
      n_geom = options.multigeom
      NAtom = len(AtomList) / n_geom
      for i in range(0, n_geom):
         fw.write("%d\n\n" %NAtom)
         for index in range(0, NAtom):
            offset = i*NAtom
            atomic_symbol = AtomList[index+offset]
            x,y,z = CoordList[index+offset]
            fw.write("%-2s %14.10f %14.10f %14.10f\n" %(atomic_symbol,x,y,z))
         fw.write("\n")
      fw.close()
           
   return xyz_file #return the file name

def get_xyz_adiab_eda(output_file, options):
   nameroot = re.search('(\S+)_adiabatic_eda', output_file).group(1)
   tmp_file = nameroot+'.tmp'
   xyz_files = []
   command = "sed -n " + "'/OPTIMIZATION CONVERGED/,/Z-matrix/p' " + output_file + " > "+tmp_file
   os.system(command)
   fr = open(tmp_file, 'r')
   AtomList =  []
   CoordList = []
   all_lines = fr.readlines()
   for line in all_lines:
      l = re.search('^\s*(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s*$', line)
      if l!=None:
         AtomList.append(l.group(2))
         CoordList.append((float(l.group(3)), float(l.group(4)), float(l.group(5))))
   fr.close()
   sp.call(['rm', tmp_file])
   n_geom = options.multigeom
   NAtom = len(AtomList) / n_geom
   for i in range(0, n_geom):
      if i == 0:
         filename = nameroot+'_scfgeom.xyz'
      elif i == 1:
         filename = nameroot+'_polgeom.xyz'
      else:
         filename = nameroot+'_frzgeom.xyz'
      xyz_files.append(filename)
      fw = open(filename, 'w')
      fw.write("%d\n\n" %NAtom)
      for index in range(0, NAtom):
         offset = i*NAtom
         atomic_symbol = AtomList[index+offset]
         x,y,z = CoordList[index+offset]
         fw.write("%-2s %14.10f %14.10f %14.10f\n" %(atomic_symbol,x,y,z))
   fw.close()
   return xyz_files

def get_gzmat(output_file):
   print("\"get_gzmat\" is not implemented yet")
   sys.exit(1)

def get_energy(options): #This function should be called in "manipulate_one_folder"
   tmpfile = 'tmp_energy'
   data_file = 'energy_of_opt_structures.csv'
   os.system('grep -H "Final energy is" *.out > '+tmpfile)
   fr = open(tmpfile,'r')
   datapoints = []
   for line in fr.readlines():
      if options.pes:
         placeholder = options.placeholder
         l = re.search(placeholder+'_([^_]+)_\S+.out:\s+Final energy is\s+(\S+)',line)
         coord = float(l.group(1))
         energy = float(l.group(2))
         datapoints.append((coord,energy))
      elif options.snap:
         placeholder = options.placeholder
         l = re.search(placeholder+'_(\d+)_\S+.out:\s+Final energy is\s+(\S+)',line)
         snap_ID = int(l.group(1))
         energy = float(l.group(2))
         datapoints.append((snap_ID,energy))
      else:
         l = re.search('(\S+).out:\s+Final energy is\s+(\S+)',line)
         jobname = l.group(1)
         energy = float(l.group(2))
         datapoints.append((jobname,energy))
   fr.close()
   fw = open(data_file,'w')
   if options.pes:
      for data in sorted(datapoints, key=lambda data:data[0], reverse=options.reverse_order):
         fw.write("%.2f,%.10f\n" %data)
   else:
      for data in datapoints:
         fw.write("%s,%.10f\n" %data)
   fw.close()
   sp.call(['rm', tmpfile])
   print("\"energy_of_opt_structures.csv\" created")

def get_frequency(options):
   freq_data={}
   tmpfile = 'tmp_freq'
   os.system('grep "Frequency: " *.out > '+tmpfile)
   #os.system('grep -A 50000 "Final energy is" *.out | grep "Frequency: " > '+tmpfile)
   fr = open(tmpfile, 'r')
   for line in fr.readlines():
      l = line.split()
      jobname = re.search('(\S+).out', l[0]).group(1)
      if jobname not in freq_data:
         freq_data[jobname] = {}
         freq_data[jobname]["n_freq"] = 0
         freq_data[jobname]["freq"]=[]
      for data in l[2:]:
         freq_data[jobname]["freq"].append(float(data))
         freq_data[jobname]["n_freq"] += 1
   fr.close()
   sp.call(['rm', tmpfile])

   if options.intensity:
      tmpfile = 'tmp_intensity'
      os.system('grep "IR Intens: " *.out > '+tmpfile)
      #os.system('grep -A 50000 "Final energy is" *.out | grep "IR Intens: " > '+tmpfile)
      fr = open(tmpfile, 'r')
      for line in fr.readlines():
         l = line.split()
         jobname = re.search('(\S+).out', l[0]).group(1)
         if jobname not in freq_data:
            print("Error: the frequency data for %s does not exist" %jobname)
            sys.exit(0)
         if "intens" not in freq_data[jobname]:
            freq_data[jobname]["intens"]=[]
            freq_data[jobname]["n_intens"] = 0
         for data in l[3:]:
            freq_data[jobname]["intens"].append(float(data))
            freq_data[jobname]["n_intens"] += 1
      fr.close()
      sp.call(['rm', tmpfile])

   freq_data_file = 'frequency.csv'
   fw = open(freq_data_file, 'w')
   for jobname in sorted(freq_data, key=lambda jobname:get_sorting_key(jobname, options), reverse=options.reverse_order):
      if (not options.multigeom) or ('adiabatic_eda' not in jobname):
         fw.write('%s,' %jobname)
         for freq in freq_data[jobname]["freq"]:
            fw.write('%.2f,' %freq)
         fw.write('\n')
      else:
         n_geom = options.multigeom
         n_freq_per_geom = freq_data[jobname]["n_freq"] / n_geom
         offset = 0
         for igeom in range(0, n_geom):
            fw.write('%s,' %jobname)
            for ifreq in range(0, n_freq_per_geom):
               fw.write('%.2f,' %freq_data[jobname]["freq"][offset+ifreq])
            fw.write('\n')
            offset += n_freq_per_geom
   fw.close()

   if options.intensity:
      intens_data_file = 'intensity.csv'
      fw = open(intens_data_file, 'w')
      for jobname in sorted(freq_data, key=lambda jobname:get_sorting_key(jobname, options), reverse=options.reverse_order):
         if not options.multigeom:
            fw.write('%s,' %jobname)
            for intens in freq_data[jobname]["intens"]:
               fw.write('%.3f,' %intens)
            fw.write('\n')
         else:
            n_geom = options.multigeom
            n_intens_per_geom = freq_data[jobname]["n_intens"] / n_geom
            offset = 0
            for igeom in range(0, n_geom):
               fw.write('%s,' %jobname)
               for i_intens in range(0, n_intens_per_geom):
                  fw.write('%.2f,' %freq_data[jobname]["intens"][offset+i_intens])
               fw.write('\n')
               offset += n_intens_per_geom
      fw.close()

def get_frequency_new(options):
   outfile_list = glob.glob("*.out")
   freq_data = {}
   tmpfile = 'tmp_freq'
   for outfile in outfile_list:
      jobname = re.search('(\S+).out', outfile).group(1)
      freq_data[jobname] = {}
      command = "sed -n '/INFRARED INTENSITIES/,/STANDARD THERMODYNAMIC/p' " + outfile + " | " + "grep 'Frequency:'" + " > " + tmpfile
      os.system(command)
      fr = open(tmpfile, 'r')
      for line in fr.readlines():
         l = line.split()
         if "freq" not in freq_data[jobname]:
            freq_data[jobname]["n_freq"] = 0
            freq_data[jobname]["freq"]=[]
         for data in l[1:]:
            freq_data[jobname]["freq"].append(float(data))
            freq_data[jobname]["n_freq"] += 1
      fr.close()
      
      if options.intensity:
         command = "sed -n '/INFRARED INTENSITIES/,/STANDARD THERMODYNAMIC/p' " + outfile + " | " + "grep 'IR Intens:'" + " > " + tmpfile
         os.system(command)
         fr = open(tmpfile, 'r')
         for line in fr.readlines():
            l = line.split()
            if jobname not in freq_data:
               print("Error: the frequency data for %s does not exist" %jobname)
               sys.exit(0)
            if "intens" not in freq_data[jobname]:
               freq_data[jobname]["intens"]=[]
               freq_data[jobname]["n_intens"] = 0
            for data in l[2:]:
               freq_data[jobname]["intens"].append(float(data))
               freq_data[jobname]["n_intens"] += 1
         fr.close()
   sp.call(['rm', tmpfile])

   freq_data_file = 'frequency.csv'
   fw = open(freq_data_file, 'w')
   for jobname in sorted(freq_data, key=lambda jobname:get_sorting_key(jobname, options), reverse=options.reverse_order):
      if (not options.multigeom) or ('adiabatic_eda' not in jobname):
         fw.write('%s,' %jobname)
         for freq in freq_data[jobname]["freq"]:
            fw.write('%.2f,' %freq)
         fw.write('\n')
      else:
         n_geom = options.multigeom
         n_freq_per_geom = freq_data[jobname]["n_freq"] / n_geom
         offset = 0
         for igeom in range(0, n_geom):
            fw.write('%s,' %jobname)
            for ifreq in range(0, n_freq_per_geom):
               fw.write('%.2f,' %freq_data[jobname]["freq"][offset+ifreq])
            fw.write('\n')
            offset += n_freq_per_geom
   fw.close()

   if options.intensity:
      intens_data_file = 'intensity.csv'
      fw = open(intens_data_file, 'w')
      for jobname in sorted(freq_data, key=lambda jobname:get_sorting_key(jobname, options), reverse=options.reverse_order):
         if not options.multigeom:
            fw.write('%s,' %jobname)
            for intens in freq_data[jobname]["intens"]:
               fw.write('%.3f,' %intens)
            fw.write('\n')
         else:
            n_geom = options.multigeom
            n_intens_per_geom = freq_data[jobname]["n_intens"] / n_geom
            offset = 0
            for igeom in range(0, n_geom):
               fw.write('%s,' %jobname)
               for i_intens in range(0, n_intens_per_geom):
                  fw.write('%.2f,' %freq_data[jobname]["intens"][offset+i_intens])
               fw.write('\n')
               offset += n_intens_per_geom
      fw.close()

def get_sorting_key(jobname, options):
   if options.sorted==None:
      return jobname
   else:
      l = re.search(options.sorted+'_([^_]+)', jobname)
      if l!=None:
         return float(l.group(1))
      else:
         print("Can't locate the sort key")
         sys.exit(0)

def get_jobname_modelchem(line, options):
   l = re.search('(\S+)_([^_]+)_([^_]+).out', line)
   jobname = l.group(1)
   functional = l.group(2)
   basis = l.group(3)
   if options.snap:
      jobname = int(re.search(options.placeholder+'_([^_]+)', jobname).group(1))
   elif options.pes:
      jobname = float(re.search(options.placeholder+'_([^_]+)', jobname).group(1))
   modelchem = functional, basis
   return jobname, modelchem

def initialize_datapoint(options):
   datapoint = {}
   outlist = glob.glob('*.out')
   for outfile in outlist:
      jobname, modelchem = get_jobname_modelchem(outfile, options)
      if modelchem not in datapoint:
         datapoint[modelchem] = {}
      datapoint[modelchem][jobname] = {}
      datapoint[modelchem][jobname]["flag"] = 0 #initialized as unfinished
   return datapoint 

def get_energy_modelchem(datapoint, options):
   tmpfile = 'tmp_energy'
   os.system('grep "Final energy is" *.out > '+tmpfile)
   fr = open(tmpfile, 'r')
   for line in fr.readlines():
      l = re.search('(\S+).out:\s+Final energy is\s+(\S+)',line)
      jobname, modelchem = get_jobname_modelchem(l.group(1)+'.out', options)
      energy = float(l.group(2))
      datapoint[modelchem][jobname]["energy"] = energy
      datapoint[modelchem][jobname]["flag"] = 1  #succeed if the final energy is detected
   fr.close()
   sp.call(['rm', tmpfile])

def get_xyz_modelchem(datapoint, options):
   outfile_list = glob.glob('*.out')
   tmpfile = 'geom.tmp'
   for outfile in outfile_list:
      jobname, modelchem = get_jobname_modelchem(outfile, options)
      if datapoint[modelchem][jobname]["flag"] == 1:
         os.system('grep -A 500 "OPTIMIZATION CONVERGED" '+outfile+' | grep -B 500 "Z-matrix" | grep -A 500 "ATOM" | grep -v "ATOM" | grep -v "Print" > '+tmpfile)
         fr = open(tmpfile, 'r')
         datapoint[modelchem][jobname]["AtomList"] = []
         datapoint[modelchem][jobname]["CoordList"] = []
         for line in fr.readlines():
            l = re.search('^\s*(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s*$', line)
            if l!=None:
               datapoint[modelchem][jobname]["AtomList"].append(l.group(2))
               datapoint[modelchem][jobname]["CoordList"].append((float(l.group(3)), float(l.group(4)), float(l.group(5))))
         fr.close()
   sp.call(['rm', tmpfile])

def get_frequency_modelchem(datapoint, options):
   tmpfile = 'tmp_freq'
   os.system('grep -A 50000 "Final energy is" *.out | grep "Frequency: "  > '+tmpfile)
   fr = open(tmpfile, 'r')
   for line in fr.readlines():
      l = line.split()
      jobname, modelchem = get_jobname_modelchem(l[0], options)
      if datapoint[modelchem][jobname]["flag"] == 1:  #optimization converged
         if "freq" not in datapoint[modelchem][jobname]:
            datapoint[modelchem][jobname]["freq"] = []
         for data in l[2:]:
            datapoint[modelchem][jobname]["freq"].append(float(data))
   fr.close()
   sp.call(['rm', tmpfile])
   
   if options.intensity:
      tmpfile = 'tmp_intensity'
      os.system('grep -A 50000 "Final energy is" *.out | grep "IR Intens: " > '+tmpfile)
      fr = open(tmpfile, 'r')
      for line in fr.readlines():
         l = line.split()
         jobname, modelchem = get_jobname_modelchem(l[0], options)
         if datapoint[modelchem][jobname]["flag"] == 1: #optimized converged
            if "intens" not in datapoint[modelchem][jobname]:
               datapoint[modelchem][jobname]["intens"] = []
            for data in l[3:]:
               datapoint[modelchem][jobname]["intens"].append(float(data))
      fr.close()
      sp.call(['rm', tmpfile])

def get_n_imaginary(datapoint):
   for modelchem in datapoint:
      for jobname in datapoint[modelchem]:
         if datapoint[modelchem][jobname]["flag"] == 0:
            datapoint[modelchem][jobname]["n_imag"] = 'NA'
         else:
            count = 0
            for freq in datapoint[modelchem][jobname]["freq"]:
               if freq < 0:
                  count += 1
            datapoint[modelchem][jobname]["n_imag"] = count

def modelchem_based_print(datapoint, options):
   energy_output = 'energy.csv'
   fw = open(energy_output, 'w')
   for modelchem in sorted(datapoint, key=lambda modelchem:modelchem[0]):
      fw.write('%s/%s\n' %modelchem)
      for jobname in sorted(datapoint[modelchem]):
         if datapoint[modelchem][jobname]["flag"] == 1:
            energy = datapoint[modelchem][jobname]["energy"]
            fw.write('%s,%.10f\n' %(jobname, energy))
         else:
            fw.write('%s,NA\n' %jobname)
   fw.close()

   if options.do_freq: 
      freq_output = 'frequency.csv'
      fw = open(freq_output, 'w')
      for modelchem in sorted(datapoint, key=lambda modelchem:modelchem[0]):
         fw.write('%s/%s\n' %modelchem)
         for jobname in sorted(datapoint[modelchem]):
            if datapoint[modelchem][jobname]["flag"] == 1:
               fw.write('%s,' %jobname)
               for freq in datapoint[modelchem][jobname]["freq"]:
                  fw.write('%.2f,' %freq)
               fw.write('\n')
         fw.write('\n')
      fw.close()

   if options.intensity:
      intens_output = 'intensity.csv'
      fw = open(intens_output, 'w')
      for modelchem in sorted(datapoint, key=lambda modelchem:modelchem[0]):
         fw.write('%s/%s\n' %modelchem)
         for jobname in sorted(datapoint[modelchem]):
            if datapoint[modelchem][jobname]["flag"] == 1:
               fw.write('%s,' %jobname)
               for intens in datapoint[modelchem][jobname]["intens"]:
                  fw.write('%.3f,' %intens)
               fw.write('\n')
         fw.write('\n')
      fw.close()

   if options.n_imag:
      fw = open('n_imag.csv', 'w')
      for modelchem in sorted(datapoint, key=lambda modelchem:modelchem[0]):
         fw.write('%s/%s\n' %modelchem)
         for jobname in sorted(datapoint[modelchem]):
            if datapoint[modelchem][jobname]["flag"] == 1:
               fw.write('%s,%d\n' %(jobname, datapoint[modelchem][jobname]["n_imag"]))
            else:
               fw.write('%s,NA\n' %jobname)
         fw.write('\n')
      fw.close()

def modelchem_sorted_geometry(datapoint):
   geom_path = "geometry"
   curdir = os.getcwd()
   if not os.path.exists(geom_path):
      sp.call(['mkdir', geom_path])
   for modelchem in datapoint:
      directory_name = geom_path+'/'+modelchem[0]+'_'+modelchem[1]
      sp.call(['mkdir', directory_name])
      os.chdir(directory_name)
      for jobname in datapoint[modelchem]:
         if datapoint[modelchem][jobname]["flag"] == 1:
            xyz_file = str(jobname)+'.xyz'
            fw = open(xyz_file, 'w')
            NAtom = len(datapoint[modelchem][jobname]["AtomList"])
            fw.write("%d\n\n" %NAtom)
            for index in range(0, NAtom):
               atomic_symbol = datapoint[modelchem][jobname]["AtomList"][index]
               x,y,z = datapoint[modelchem][jobname]["CoordList"][index] 
               fw.write("%-2s %14.10f %14.10f %14.10f\n" %(atomic_symbol,x,y,z))
            fw.close()
      os.chdir(curdir)

#The script
options,args=ParseInput(sys.argv)
outdir_list=[]
cur_dir = os.getcwd()
if len(args) > 1:
   result_dir = args[1]
   if result_dir[-1:]!='/':
      result_dir += '/'
if options.all:
   outdir_list = glob.glob(result_dir+'*/')
elif options.keyword!=None:
   outdir_list = glob.glob(result_dir+'*'+options.keyword+'*/')
if options.target!=None:
   for target_dir in  options.target:
      if target_dir not in outdir_list:
         outdir_list.append(target_dir)
print(outdir_list)

for outdir in outdir_list:
   if not options.modelchem:
      manipulate_one_folder(outdir, options)
   else:
      manipulate_folder_modelchem(outdir, options)
