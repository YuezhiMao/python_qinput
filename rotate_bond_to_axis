#! /usr/bin/env python3

import os, sys, re, glob
import xyzgeom
import numpy as np
import subprocess as sp
from optparse import OptionParser

def ParseInput(ArgsIn):
   UseMsg = "rotate_bond_to_axis [options] [xyzfile]"
   parser = OptionParser(usage=UseMsg)
   parser.add_option('--bond_atoms', dest='bond_atoms', action='callback', type='string', callback=string_sp_callback, default=None, help='specify the two bond atoms')
   parser.add_option('-o','--outfile',dest='outfile',action='store',type='string', default=None, help='Name of the rotated xyz file')
   options, args = parser.parse_args(ArgsIn)
   if options.bond_atoms == None:
      print ("The two bond atoms must be specified")
      parser.print_help()
      sys.exit(0)
   if len(sys.argv) < 2:
      parser.print_help()
      sys.exit(0)

   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def rotate_bond_to_zaxis(xyzfile, atom_idx1, atom_idx2, xyzfile_aligned):
   AtomList, Coords = xyzgeom.parse_xyz_file(xyzfile)
   #always set origin to be atom 1
   xyzgeom.set_origin(Coords, atom_idx1)
   print (Coords)
   bond_vec = Coords[atom_idx2-1] - Coords[atom_idx1-1]
   bond_len = np.linalg.norm(bond_vec)
   #step 1: rotate into the y=0 plane
   phi = np.arctan2(bond_vec[1], bond_vec[0])
   if phi < 0:
      phi += 2.0 * np.pi
   print ("phi = %.3f degs" %(phi * 180.0 / np.pi))
   new_Coords = xyzgeom.rotate_cylindrical(Coords, phi, axis="z", use_degree=False)
   print (new_Coords)
   #setp 2: rotate to the z axis
   theta = np.arccos(bond_vec[2] / bond_len)
   print ("theta = %.3f degs" %(theta * 180.0 / np.pi))
   new_Coords = xyzgeom.rotate_cylindrical(new_Coords, theta, axis='y', use_degree=False)
   print (new_Coords)
   xyzgeom.write_xyz_file(xyzfile_aligned, AtomList, new_Coords) 


options, args = ParseInput(sys.argv)
xyzfile = args[1]
atom_idx1, atom_idx2 = int(options.bond_atoms[0]), int(options.bond_atoms[1])
xyzfile_aligned = xyzfile[:-4] + "_zaligned" + ".xyz"
if options.outfile != None:
   xyzfile_aligned = options.outfile

print ("Generating new coordinate file: " + xyzfile_aligned)
rotate_bond_to_zaxis(xyzfile, atom_idx1, atom_idx2, xyzfile_aligned)
