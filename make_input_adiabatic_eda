#! /usr/bin/env python3

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qmol, qrems

def ParseInput(ArgsIn):
   UseMsg = '''
   python make_input_adiabatic_eda.py [options] [xyz_path] [frgm_partition]
   ''' 
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('--onsite',dest='onsite',action='store_true',default=False,help='frgm file and xyz file under the same dir and sharing the same nameroot')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='def2-tzvppd',help='The target basis (default is def2-tzvppd)')
   parser.add_option('-m','--method',dest='method',action='callback',type='string', default='wB97M-V', callback=string_sp_callback,help='The methods (density functionals) to use')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--pes',dest='pestype',action='store',type='string',default='integrated',help='Integrated or separated optimizations on FRZ, POL or fully relaxed PESs')
   parser.add_option('--sym_ignore', dest='sym_ignore', action='store_true', default=False, help='ignore point group symmetry during geometry optimization')
   parser.add_option('--scfmi_mode', dest='scfmi_mode', type='int', action='store', default=0, help='set scfmi_mode for pol and frz jobs (default 0)')
   parser.add_option('--do_freq', dest='do_freq', action='store_true', default=False, help='do frequency calculation at the minimum of each PES')
   parser.add_option('--do_ferf', dest='do_ferf', action='store_true', default=False, help='use FERF to construct the polarized PES')
   parser.add_option('--loose', dest='loose', action='store_true', default=False, help='Use looser convergence criterion for geom opt')
   parser.add_option('--geom_constr', dest='geom_constr', action='store', default=None, type='string', help='specify the template file for adding geometry optimization constraint')
   parser.add_option('--lr', dest='lr', action='store_true', default=False, help='turn on special settings for long-range jobs') 
   parser.add_option('--sol',dest='sol',action='store',type='string',default=None,help='specify the solvent model to use')
   parser.add_option('--sol_file', dest='sol_file', action='store', type='string', default=None, help='file for the solvent model input section')
    
   options, args = parser.parse_args(ArgsIn)

   if not options.onsite:
      if len(args) < 3:
         parser.print_help()
         sys.exit(1)
   else:
      if len(args) < 2:
         parser.print_help()
         sys.exit(1)
   if not options.all and options.target==None and options.keyword==None:
      print("The target directory must be specified: one or some or all")
      parser.print_help()
      sys.exit(1)
   if options.sol_file != None and (not os.path.exists(options.sol_file)):
      print("Specified sol_file does not exist")
      sys.exit(1)
   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def set_rems_adiabatic_eda(curREM, method, basis, surface, options): 
   qrems.set_rems_common(curREM, method, basis)
   qrems.ModRem('JOBTYPE', 'OPT', curREM)
   qrems.ModRem('GEOM_OPT_DRIVER', 'OPTIMIZE', curREM)
   qrems.ModRem('SCF_GUESS', 'FRAGMO', curREM)
   qrems.ModRem('IDERIV', '1', curREM)
   if surface == 'pol' or surface == 'frz':
      qrems.ModRem('SCFMI_MODE', str(options.scfmi_mode), curREM)
   elif surface != 'full':
      print ("Unrecognized surface type: %s" %surface)
      sys.exit(1)
   if options.loose:
      qrems.ModRem('SCF_CONVERGENCE', '8', curREM)
      #use default convergence criterion for opt
      qrems.ModRem('GEOM_OPT_TOL_GRADIENT', '100', curREM)
      qrems.ModRem('GEOM_OPT_TOL_DISPLACEMENT', '100', curREM)
      qrems.ModRem('GEOM_OPT_TOL_ENERGY', '10', curREM)
      qrems.ModRem('GEOM_OPT_MAX_CYCLES', '200', curREM)
   else:
      qrems.ModRem('SCF_CONVERGENCE', '9', curREM)
      qrems.ModRem('GEOM_OPT_TOL_GRADIENT', '50', curREM)
      qrems.ModRem('GEOM_OPT_TOL_DISPLACEMENT', '50', curREM)
      qrems.ModRem('GEOM_OPT_TOL_ENERGY', '10', curREM)
      qrems.ModRem('GEOM_OPT_MAX_CYCLES', '200', curREM)
   if (method != 'HF'):
      qrems.ModRem ('XC_GRID', '000075000302', curREM)  #not using the too dense grid		
      qrems.ModRem ('NL_GRID', '1', curREM)
   if options.lr:
      qrems.ModRem('GEOM_OPT_TOL_GRADIENT', '20', curREM)
      qrems.ModRem('GEOM_OPT_TOL_DISPLACEMENT', '10', curREM) #prevent immeidate convergence
      qrems.ModRem('GEOM_OPT_TOL_ENERGY', '10', curREM)
      qrems.ModRem('XC_GRID', '000250000590', curREM)
   if options.sym_ignore:
      qrems.ModRem('SYM_IGNORE', 'TRUE', curREM)
   else:
      qrems.ModRem('SYM_IGNORE', 'FALSE', curREM)
   if options.sol != None:
      qrems.ModRem('SOLVENT_METHOD', options.sol, curREM)

def set_ferf_rems(curREM):
   qrems.ModRem('IDERIV', '0', curREM)
   qrems.ModRem('POL_GEOM', 'FALSE', curREM)
   qrems.ModRem('SCFMI_MODE', '1', curREM)
   qrems.ModRem('CHILD_MP', 'TRUE', curREM)
   qrems.ModRem('CHILD_MP_ORDERS', '232', curREM) #nDQ
   qrems.ModRem('GUESS_ALWAYS', 'TRUE', curREM)

def get_nameroot(Name):
   l = re.search('(\S+)_([^_]+)geom', Name)
   if l!=None:
      Nameroot = l.group(1)
   else:
      Nameroot = Name
   return Nameroot

def append_single_geom_constraint(fw, constraint_template, XYZ, placeholder='dist'):
   l = re.search(placeholder+'_(\S+)', XYZ.Name)
   if l == None:
      print((XYZ.Name))
      print ("No geom_param specified in xyz file name. Try different placeholder or you are screwed")
      sys.exit(0)
   geom_param = float(l.group(1))
   qrems.apply_single_geom_constraint(fw, geom_param, constraint_template)

def XYZ_to_Input(fw, XYZ, FRGM, curREM, read_mol=False, do_freq=False, do_ferf=False, genbas=False, geom_constr=None):
   #print "generate %s" %inputfile
   #check if unrestricted (any open-shell fragment?)
   unrestricted = qmol.detect_unrestricted_frgm(FRGM)
   if unrestricted:
      qrems.ModRem('UNRESTRICTED','TRUE',curREM)

   if do_ferf:
      set_ferf_rems(curREM)

   if not read_mol:
      qmol.WriteMolecule_Frgm(fw, XYZ, FRGM)
   else:
      qmol.WriteMolecule_Read(fw) 

   qrems.AppendRem(fw, curREM)
   if options.sol_file != None:
      qrems.copy_section_over(fw, options.sol_file)
   if genbas:
      qrems.copy_section_over(fw, 'genbas')
   if geom_constr != None:
      append_single_geom_constraint(fw, geom_constr, XYZ)

   #if frequency is desired, append a second job
   if do_freq:
      fw.write('\n@@@\n\n')
      qmol.WriteMolecule_Read(fw)
      #Use the current rem but modify the jobtype to freq
      qrems.ModRem('JOBTYPE', 'FREQ', curREM)
      qrems.AppendRem(fw, curREM)
      if options.sol_file != None:
         qrems.copy_section_over(fw, options.sol_file)
      if genbas:
         qrems.copy_section_over(fw, 'genbas')

#Generate an integrated adiabatic EDA job
def XYZ_to_Input_Integrated(fw, XYZ, FRGM, method, basis, options):
   use_genbas = basis.lower() == 'gen'
   #Fully relaxed PES first 
   curREM = qrems.ParseRems(os.path.expandvars('$QREMPATH')+'/'+'rem_scfgeom')
   set_rems_adiabatic_eda(curREM, method, basis, 'full', options)
   XYZ_to_Input(fw, XYZ, FRGM, curREM, read_mol=False, do_freq=options.do_freq, genbas=use_genbas, geom_constr=options.geom_constr)
   fw.write('\n@@@\n\n')
   #Polarized PES
   curREM = qrems.ParseRems(os.path.expandvars('$QREMPATH')+'/'+'rem_polgeom')
   set_rems_adiabatic_eda(curREM, method, basis, 'pol', options)
   XYZ_to_Input(fw, XYZ, FRGM, curREM, read_mol=True, do_freq=options.do_freq, do_ferf=options.do_ferf, genbas=use_genbas, geom_constr=options.geom_constr)
   fw.write('\n@@@\n\n')
   #Frozen PES
   curREM = qrems.ParseRems(os.path.expandvars('$QREMPATH')+'/'+'rem_frzgeom')
   set_rems_adiabatic_eda(curREM, method, basis, 'frz', options)
   XYZ_to_Input(fw, XYZ, FRGM, curREM, read_mol=True, do_freq=options.do_freq, genbas=use_genbas, geom_constr=options.geom_constr)

#the script
options, args = ParseInput(sys.argv)
xyz_path = args[1]
if not options.onsite:
   frgm_partition = args[2]
if xyz_path[-1:] != '/':
   xyz_path += '/'
#determine xyz_file list
#"target" should be the most common mode here
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

#parse the fragment file
FRGM = ''
if not options.onsite:   #all xyz files share the common frgm file: parse it beforehand
   FRGM = qmol.FRGM(frgm_partition)

#create the input file(s), and put it into the input_path
specify_method = False
if len(options.method)*len(options.basis) > 1:
   specify_method = True
for method in options.method:
   for basis in options.basis:
      for xyz_file in xyzfile_list:
         parsed_XYZ = qmol.XYZ(xyz_file)
         if options.onsite:
            frgm_file = xyz_file[:-4]+'.frgm'
            FRGM = qmol.FRGM(frgm_file)
         if options.pestype.lower()=='integrated' or options.pestype.lower()=='all':  #integrated adaibatic EDA job
            inputfile = input_path + get_nameroot(parsed_XYZ.Name)
            if specify_method:
               inputfile += '_adiabatic_eda_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            else:
               inputfile += '_adiabatic_eda.in'
            fw = open(inputfile, 'w')
            XYZ_to_Input_Integrated(fw, parsed_XYZ, FRGM, method, basis, options)
            fw.close()

         elif options.pestype.lower()=='frz' or options.pestype.lower()=='frozen': #separated calculation on the frozen PES
            inputfile = input_path + get_nameroot(parsed_XYZ.Name)
            if specify_method:
               inputfile += '_frzgeom_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            elif options.do_freq:
               inputfile += '_frzgeom_freq.in'
            else:
               inputfile += '_frzgeom.in'
            fw = open(inputfile, 'w')
            curREM = qrems.ParseRems(os.path.expandvars('$QREMPATH')+'/'+'rem_frzgeom')
            set_rems_adiabatic_eda(curREM, method, basis, 'frz', options)
            XYZ_to_Input(fw, parsed_XYZ, FRGM, curREM, do_freq=options.do_freq, genbas=(basis.lower()=='gen'), geom_constr=options.geom_constr)
            fw.close()

         elif options.pestype.lower()=='pol' or options.pestype.lower()=='polarized': #separated calculation on the polarized PES
            inputfile = input_path + get_nameroot(parsed_XYZ.Name)
            if specify_method:
               if not options.do_ferf:
                  inputfile += '_polgeom_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
               else:
                  inputfile += '_polgeom_ferf_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            elif options.do_freq:
               if not options.do_ferf:
                  inputfile += '_polgeom_freq.in'
               else:
                  inputfile += '_polgeom_ferf_freq.in'
            else:
               if not options.do_ferf:
                  inputfile += '_polgeom.in'
               else:
                  inputfile += '_polgeom_ferf.in'

            fw = open(inputfile, 'w')
            curREM = qrems.ParseRems(os.path.expandvars('$QREMPATH')+'/'+'rem_polgeom')
            set_rems_adiabatic_eda(curREM, method, basis, 'pol', options)
            XYZ_to_Input(fw, parsed_XYZ, FRGM, curREM, do_freq=options.do_freq, do_ferf=options.do_ferf, genbas=(basis.lower()=='gen'), geom_constr=options.geom_constr)
            fw.close()
            
         elif options.pestype.lower()=='scf' or options.pestype.lower()=='full': #separated calculation on the fully relaxed PES
            inputfile = input_path + get_nameroot(parsed_XYZ.Name)
            if specify_method:
               inputfile += '_scfgeom_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            elif options.do_freq:
               inputfile += '_scfgeom_freq.in'
            else:
               inputfile += '_scfgeom.in'
            fw = open(inputfile, 'w')
            curREM = qrems.ParseRems(os.path.expandvars('$QREMPATH')+'/'+'rem_scfgeom')
            set_rems_adiabatic_eda(curREM, method, basis, 'full', options)
            XYZ_to_Input(fw, parsed_XYZ, FRGM, curREM, do_freq=options.do_freq, genbas=(basis.lower()=='gen'), geom_constr=options.geom_constr)
            fw.close()

         else:
            print("Unsupported PES type")
            sys.exit(0)
