#! /usr/bin/env python3

import os, sys, re, glob, math, xyzgeom
import subprocess as sp
from optparse import OptionParser

def ParseInput(ArgsIn):
   UseMsg = '''
   Mateo's code for finite-difference frequency with molecular segments
   make_input_finite_difference [xyz_file] [fd_segment_size] [input_dir]
   '''
   # all options that can be used with make_input_sp_geom script and are useful for finite difference calculations
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-m','--method',dest='method',action='store',type='string', default='B3LYP-D3BJ', help='The method to use (default: B3LYP-D3BJ)')
   parser.add_option('-b','--basis',dest='basis',action='store',type='string',default='631+gd',help='The target basis (default: 6-31+G(d))')
   parser.add_option('--sol',dest='sol',type='string',action='store',default=None,help='Specify the solvent model to use')
   parser.add_option('--sol_param',dest='sol_param',type='string',action='store',default=None,help='The solvent name or the dielectric constant (for PCM)')
   parser.add_option('--charge',dest='charge',action='store',type='int',default=0,help='total charge of the system')
   parser.add_option('--mult',dest='mult',action='store',type='int',default=1,help='total multiplicity of the system') 
   parser.add_option('--unrestricted',dest='unrestricted',action='store_true',default=False,help='set unrestricted = true explicitly')
   parser.add_option('--scf_algo',dest='scf_algo',action='store',default=None,type='string',help='specify the scf algorithm (if not DIIS)')
   parser.add_option('--coarse',dest='coarse',action='store',type='int',default=0,help='use less tight integral thresh and less fine grid for SCF calculations')
   parser.add_option('--geom_constr',dest='geom_constr',action='store',default=None,type='string',help='specify the template file for adding geometry optimization constraint')
   parser.add_option('--harm_confine',dest='harm_confine',action='store',type='int',default=0,help='Turn on harmonic confining potential on a given number of atoms (specify here)')
   parser.add_option('--exec',dest='exec',action='store',type='int',default=0,help='submit the jobs directly with the number of omp threads specified (default: 0, which means not running jobs)')
   options, args = parser.parse_args(ArgsIn)
   # must put in at least arguments
   if len(args) < 4:
      parser.print_help()
      sys.exit(0)
   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

options, args = ParseInput(sys.argv)
xyz_file = args[1]
fd_segment_size = int(args[2])
num_threads = options.exec
# collect number of atoms in a system using the xyz file inputted by user
Atomlist, coords = xyzgeom.parse_xyz_file(xyz_file)
num_atoms = len(Atomlist)
# calculating the number of segments or max index number by dividing size of system by size of segments
num_segments = math.ceil(num_atoms/fd_segment_size)
input_dir = args[3]
if not os.path.exists(input_dir):
   os.system("mkdir " + input_dir)

# main loop that goes from index 0 and ends when all segments are created;
# "-1" is also included, which is the final wrap up job
for index in range(-1, num_segments):
   # start the command by specifying job type to be "freq"
   command = "make_input_sp_geom --freq"
   # puts in the target, method, basis, and input directory options
   command += " -t " + xyz_file + " -m " + options.method + " -b " + options.basis + " -i " + input_dir
   
   # other options (if they are specified) are added to the command
   if options.sol != None:
      command += ' --sol='+options.sol
   if options.sol_param != None:
      command += ' --sol_param='+options.sol_param
   if options.charge != 0:
      command += ' --charge='+str(options.charge)
   if options.mult != 1:
      command += ' --mult='+str(options.mult)
   if options.unrestricted:
      command += ' --unrestricted'
   if options.scf_algo != None:
      command += ' --scf_algo='+options.scf_algo
   if options.geom_constr != None:
      command += ' --geom_constr='+options.geom_constr
   if options.harm_confine > 0:
      command += ' --harm_confine='+str(options.harm_confine)
   if options.coarse > 0:
      command += ' --coarse='+str(options.coarse)

   # final additions for specifically the finite difference job
   command += ' --fdseg=' + str(index) + ' --fdseg_size=' + str(fd_segment_size)

   # prints out the final command and creates the input file
   print (command)
   os.system(command)
   
# automated submission of the job to the server using user inputted number of threads
if options.exec > 0:
   xyz_filename = xyz_file[:-4]
   os.chdir(input_dir)
   for index in range(0, num_segments): #not including -1 at the beginning
      input_file = xyz_filename + '_freq_seg' + str(index) + "_*.in"
      submission_cmd = "submit_qchem -p " + str(num_threads) + " " + input_file
      print(submission_cmd)
      os.system(submission_cmd)
