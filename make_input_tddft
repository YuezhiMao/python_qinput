#! /usr/bin/env python3

import os, glob, re, sys
import subprocess as sp
import numpy as np
import copy
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
   UseMsg = '''
   make_input_tddft [options] [xyz_path]
   '''
   parser = OptionParser(usage=UseMsg)
   parser.add_option('--opt',dest='opt',action='store',type='int',default=None,help='specify the state to perform geom opt')
   parser.add_option('--freq',dest='freq',action='store',type='int',default=None,help='specify the state to do harmonic frequency calculation')
   parser.add_option('--opt_freq',dest='opt_freq',action='store',type='int',default=None,help='specify the state to do geometry optimization followed by harmonic frequency calculation')
   parser.add_option('--force',dest='force',action='store',type='int',default=None,help='specify the state to calculate force')
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
   parser.add_option('-m','--method',dest='method',action='callback',type='string', default=None, callback=string_sp_callback,help='The methods (density functionals) to use')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--charge',dest='charge',action='store',type='int',default=0,help='total charge of the system')
   parser.add_option('--mult',dest='mult',action='store',type='int',default=1,help='total multiplicity of the system') 
   parser.add_option('--nroots',dest='nroots',action='store',type='int',default=4,help='number of roots (default 4)')
   parser.add_option('--triplets',dest='triplets',action='store_true',default=False,help='calculate triplet roots')
   parser.add_option('--rpa',dest='rpa',action='store_true',default=False,help='use full TDDFT (instead of TDA)')
   parser.add_option('--spinflip',dest='spinflip',action='store_true',default=False,help='do spin-flip')
   parser.add_option('--tight',dest='tight',action='store_true',default=False,help='use tigher criterion for geom opt convergence')
   parser.add_option('--sym',dest='sym',action='store_true',default=False,help='use sym_ignore = false for geom opt')
   parser.add_option('--sol',dest='sol',action='store',type='string',default=None,help='specify the solvent model to use')
   parser.add_option('--sol_file',dest='sol_file',action='store',type='string',default=None,help='file for the solvent model input section')
   parser.add_option('--sol_param',dest='sol_param',action='callback',callback=string_sp_callback,type='string',default=None,help='The parameter for solvent. Dielectric constant for PCM (optical dielectric const can be added too) and solvent name for SMx')
   parser.add_option('--nto',dest='nto', action='store_true', default=False, help='perform nto analysis and save to fchk file')
   parser.add_option('--diab',dest='diab',type='string',action='callback',default=None,callback=string_sp_callback,help='perform GMH and FCD diabatization (specify the number of atoms on fragment 1 and total number of atoms)')
   parser.add_option('--dipole_field',dest='dipole_field',action='store',type='int',default=None,help='apply a dipolar field along Z direction (in MV/cm)')
   parser.add_option('--field_dir',dest='field_dir',action='store',type='string',default='Z',help='The direction of the applied field (default: Z)')
   parser.add_option('--isotope',dest='isotope',action='store',type='string',default=None,help='Doing isotope substitution for vib analysis; specify the file for isotope section')
   parser.add_option('--pop_anal',dest='pop_anal',action='store_true',default=False,help='Calculating excited state Mulliken and ESP charges')
   parser.add_option('--do_resp',dest='do_resp',action='store_true',default=False,help='calculate the RESP charges for ground and excited states instead of ESP charges')
   parser.add_option('--relaxden',dest='relaxden',action='store_true',default=False,help='Calculating CIS/TDDFT relaxed density')
   parser.add_option('--libwfa',dest='libwfa',action='store_true',default=False,help='do wavefunction analysis through libwfa')

   options, args = parser.parse_args(ArgsIn)
   if len(args) < 2 and (options.all or options.keyword!=None):
      parser.print_help()
      sys.exit(0)
   if not options.all and options.target==None and options.keyword==None:
      print("The target directory must be specified: one or some or all")
      parser.print_help()
      sys.exit(1)
   if options.spinflip and options.rpa:
      print("Spin-flip only works with TDA. We turn off RPA forcefully")
      options.rpa = False
   if options.sol_file != None and (not os.path.exists(options.sol_file)):
      print("Specified sol_file does not exist")
      sys.exit(0)
   if options.field_dir.upper() != 'X' and options.field_dir.upper() != 'Y' and options.field_dir.upper() != 'Z':
      print ("Invalid specification of dipole field direction: %s" %options.field_dir)
      sys.exit(0)
   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def XYZ_to_Input(fw, XYZ, curREM, options):
   qmol.WriteMolecule(fw, XYZ, options.charge, options.mult)
   qrems.AppendRem(fw, curREM)
   qrems.AppendSolvationSecs(fw, options.sol, options.sol_file, options.sol_param)

   if options.dipole_field != None and options.dipole_field != 0:
      qrems.apply_dipolar_field(fw, options.dipole_field, options.field_dir)
   if options.freq and options.isotope:
      qrems.copy_section_over(fw, options.isotope)

def XYZ_to_Input_optfreq(fw, XYZ, myrems, options): 
   curREM = copy.deepcopy(myrems)
   #geom opt job
   XYZ_to_Input(fw, XYZ, curREM, options)
   #freq job
   fw.write("\n@@@\n\n")
   qmol.WriteMolecule_Read(fw)
   qrems.ModRem('JOBTYPE', 'FREQ', curREM)
   qrems.ModRem('SCF_GUESS', 'READ', curREM)
   qrems.ModRem('IDERIV', '1', curREM) #use finite-diff by default for now
   if options.isotope != None:
      qrems.ModRem('ISOTOPES', 'TRUE', curREM)
   qrems.AppendRem(fw, curREM)
   qrems.AppendSolvationSecs(fw, options.sol, options.sol_file, options.sol_param)

   if options.dipole_field != None and options.dipole_field != 0:
      qrems.apply_dipolar_field(fw, options.dipole_field, options.field_dir)
   if options.isotope:
      qrems.copy_section_over(fw, options.isotope)

def set_tight_opt_criterion(curREM):
   qrems.ModRem('GEOM_OPT_TOL_GRADIENT','100', curREM)
   qrems.ModRem('GEOM_OPT_TOL_DISPLACEMENT', '100', curREM)
   qrems.ModRem('GEOM_OPT_TOL_ENERGY', '10', curREM)

def set_rems_tddft(myrems, options):
   qrems.ModRem('XC_GRID', '000075000302', myrems)
   if options.opt != None or options.opt_freq != None:
      qrems.ModRem('JOBTYPE', 'OPT', myrems)
      qrems.ModRem('GEOM_OPT_DRIVER', 'OPTIMIZE', myrems)
      if options.opt != None:
         qrems.ModRem('CIS_STATE_DERIV', str(options.opt), myrems)
      else:
         qrems.ModRem('CIS_STATE_DERIV', str(options.opt_freq), myrems)
   elif options.force:
      qrems.ModRem('JOBTYPE', 'FORCE', myrems)
      qrems.ModRem('CIS_STATE_DERIV', str(options.force), myrems)
   elif options.freq != None:
      qrems.ModRem('JOBTYPE', 'FREQ', myrems)
      qrems.ModRem('IDERIV', '1', myrems) #use finite-diff by default for now
      qrems.ModRem('CIS_STATE_DERIV', str(options.freq), myrems)
      if options.isotope != None:
         qrems.ModRem('ISOTOPES', 'TRUE', myrems)
   if options.tight:
      set_tight_opt_criterion(myrems)
   if options.sym:
      qrems.ModRem('SYM_IGNORE', 'FALSE', myrems)
   if options.nroots != None:
      qrems.ModRem('CIS_N_ROOTS', str(options.nroots), myrems)
   if options.triplets:
      qrems.ModRem('CIS_TRIPLETS', 'TRUE', myrems)
   if options.spinflip:
      qrems.ModRem('SPIN_FLIP', 'TRUE', myrems)
      options.mult += 2
   if options.rpa:
      qrems.ModRem('RPA', '1', myrems)
   if options.sol != None:
      qrems.ModRem('SOLVENT_METHOD', options.sol, myrems)
   if options.nto:
      qrems.ModRem('GUI', '2', myrems)
      qrems.ModRem('NTO_PAIRS', '2', myrems)
   if options.diab:
      qrems.ModRem('STS_GMH', 'TRUE', myrems)
      qrems.ModRem('STS_FCD', 'TRUE', myrems)
      donor_range = '1-'+options.diab[0]
      acceptor_range = str(int(options.diab[0])+1)+'-'+options.diab[1]
      qrems.ModRem('STS_DONOR', donor_range, myrems)
      qrems.ModRem('STS_ACCEPTOR', acceptor_range, myrems)
   if options.pop_anal: 
      #note: Mulliken and ESP are the only two pop anal schemes available for TDDFT states
      qrems.ModRem('CIS_RELAXED_DENSITY', 'TRUE', myrems) #use relaxed density exclusively for now
      qrems.ModRem('POP_MULLIKEN', '-1', myrems)
      if options.do_resp:
         qrems.ModRem('RESP_CHARGES', '1', myrems)
      else:
         qrems.ModRem('ESP_CHARGES', '1', myrems)
   if options.relaxden:
      qrems.ModRem('CIS_RELAXED_DENSITY', 'TRUE', myrems)
   if options.libwfa:
      qrems.ModRem('STATE_ANALYSIS', 'TRUE', myrems)


options, args = ParseInput(sys.argv)
xyz_path =''
if len(args) > 1:
   xyz_path = args[1]
   if xyz_path[-1:] != '/':
      xyz_path += '/'

#determine xyz_file
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

rem_file = os.path.expandvars('$QREMPATH')+'/rem_tddft'
myrems = qrems.ParseRems(rem_file)

ex_method = 'tda'
if options.rpa:
   ex_method = 'tddft'
elif options.spinflip:
   ex_method = 'sftda'
for method in options.method:
   for basis in options.basis:
      qrems.set_rems_common(myrems, method, basis)
      set_rems_tddft(myrems, options)
      for xyz_file in xyzfile_list:
         parsed_XYZ = qmol.XYZ(xyz_file)
         if options.dipole_field != None:
            if options.dipole_field > 0:
               inputfile = input_path+parsed_XYZ.Name+'_+'+str(options.dipole_field)+'.in'
            elif options.dipole_field == 0:
               inputfile = input_path+parsed_XYZ.Name+'_0.in'
            else:
               inputfile = input_path+parsed_XYZ.Name+'_'+str(options.dipole_field)+'.in'
         else:
            if options.opt:
               inputfile = input_path+parsed_XYZ.Name+'_'+ex_method+'_geom_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            elif options.freq:
               inputfile = input_path+parsed_XYZ.Name+'_'+ex_method+'_freq_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            elif options.opt_freq:
               inputfile = input_path+parsed_XYZ.Name+'_'+ex_method+'_optfreq_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
            else:
               inputfile = input_path+parsed_XYZ.Name+'_'+ex_method+'_'+method+'_'+qrems.basis_abbr(basis)+'.in' 
         fw = open(inputfile, 'w')
         if options.opt_freq:
            XYZ_to_Input_optfreq(fw, parsed_XYZ, myrems, options)
         else:
            XYZ_to_Input(fw, parsed_XYZ, myrems, options)
         fw.close()

