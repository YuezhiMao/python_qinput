#! /usr/bin/env python

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
   UseMsg = '''
   python make_input_E_bind_deltaParenT.py [options] [xyz_path] [frgm_partition]
   ''' 
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback_space,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('--nocp',dest='nocp',action='store_true',default=False,help='skip counterpoise corrections')
   parser.add_option('--fc',dest='fc',action='store_true',default=False,help='frozen core approximation')
   parser.add_option('--onsite',dest='onsite',action='store_true',default=False,help='frgm file and xyz file under the same dir and sharing the same nameroot')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   options, args = parser.parse_args(ArgsIn)

   if len(args) < 3:
      parser.print_help()
      sys.exit(1)

   if not options.all and options.target==None and options.keyword==None:
      print "The target directory must be specified: one or some or all"
      parser.print_help()
      sys.exit(1)

   if options.fc:
      print "Frozen core mode not supported for now"
      sys.exit(1)

   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def string_sp_callback_space(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(' '))

def AppendBasis(fh, corr):
   #this function works for hard-coded correlation method list and hard-coded basis files
   #TODO: make this more flexible
   basisfile = ''
   if corr.upper() == 'MP2':
      basisfile = 'basis/aCV5Z.bas' 
   elif corr.upper() == 'CCSD(T)':
      basisfile = 'basis/aCVQZ.bas'
   else:
      print "Unknown correlation method"
      sys.exit(1)
   fh.write('\n$basis\n')
   fr = open(basisfile, 'r')
   for line in fr.readlines():
      fh.write(line)
   fh.write('$end\n')
   fr.close()

def set_rems_posthf(curREM, corr, fc=False):
   ModRem('MEM_TOTAL', '12000', curREM)
   ModRem('MEM_STATIC','8000', curREM)
   ModRem('SCF_GUESS', 'SAD', curREM)
   ModRem('EXCHANGE', 'HF', curREM)	
   if not fc:
      ModRem('BASIS', 'GEN', curREM)
      ModRem('SCF_GUESS', 'CORE', curREM)
      ModRem('N_FROZEN_CORE', '0', curREM)
   if corr.upper() == 'CCSD(T)':
      ModRem('CORRELATION', 'CCSD(T)', curREM)
      ModRem('CC_MEMORY', '50000', curREM)
   elif corr.upper() == 'MP2':
      ModRem('CORRELATION', 'MP2', curREM) 
      ModRem('AO2MO_DISK', '100000', curREM)
   
def XYZ_to_Input(fw, XYZ, FRGM, curREM, doCP, corr, fc):
   #write isolated frgm jobs 
   #Order: Frag A, Frag A (with ghost); Frag B, Frag B (with ghost)
   for index_frgm in range(0,FRGM.n_frgm):
      if FRGM.mult_frgm[index_frgm] > 1:
         qrems.ModRem('UNRESTRICTED','TRUE',curREM)
      else:
         qrems.ModRem('UNRESTRICTED','FALSE',curREM)
      qmol.WriteMolecule_supersub(fw, XYZ, FRGM, index_frgm+1)
      qrems.AppendRem(fw, curREM)
      if not fc:
         AppendBasis(fw, corr)
      fw.write('\n@@@\n')
      if doCP:  #do CP correction
         qmol.WriteMolecule_supersub(fw, XYZ, FRGM, index_frgm+1,ghost=True)
         qrems.AppendRem(fw, curREM)
         if not fc:
            AppendBasis(fw, corr)
         fw.write('\n@@@\n')
   #write the supersystem job
   if FRGM.total_mult > 1:
      qrems.ModRem('UNRESTRICTED', 'TRUE', curREM)
   else:
      qrems.ModRem('UNRESTRICTED', 'FALSE', curREM)
   WriteMolecule_supersub(fw, XYZ, FRGM)
   qrems.AppendRem(fw, curREM)
   if not fc:
      AppendBasis(fw, corr)

#the script 
options, args = ParseInput(sys.argv)
xyz_path = args[1]
frgm_partition = args[2]
if xyz_path[-1:] != '/':
   xyz_path += '/'

rem_file = os.path.expandvars('$QREMPATH')+'/'+'rem_posthf'
curREM = qrems.ParseRems(rem_file)

#check if the "basis" folder exists
if not os.path.exists('basis/'):
   print "Need a \"basis\" folder under CWD"
   sys.exit(0)

#determine xyz_file list
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

#parse the fragment file
FRGM = ''
if not options.onsite:
   FRGM = qmol.FRGM(frgm_partition)

#create the input file, and move it into the input_path
corr_method_list = ['MP2','CCSD(T)'] #hard-coded
for corr in corr_method_list:
   set_rems_posthf(curREM, corr, options.fc) 
   for xyz_file in xyzfile_list:
      parsed_XYZ = XYZ(xyz_file)
      suffix = ''
      if corr == 'MP2':
         suffix = 'MP2'
      elif corr == 'CCSD(T)':
         suffix = 'parenT'
      inputfile = input_path+parsed_XYZ.Name+'_'+suffix+'.in'
      fw = open(inputfile, 'w')
      XYZ_to_Input(parsed_XYZ, FRGM, curREM, not(options.nocp), corr, options.fc)
      fw.close()
