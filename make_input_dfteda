#! /usr/bin/env python3

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser
import qrems, qmol

def ParseInput(ArgsIn):
   UseMsg = '''
   make_input_dfteda [options] [xyz_path] [frgm_file]
   ''' 
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback_space,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('--onsite',dest='onsite',action='store_true',default=False,help='frgm file and xyz file under the same dir and sharing the same nameroot')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
   parser.add_option('-m','--method',dest='method',action='callback',type='string', default=None, callback=string_sp_callback,help='The methods (density functionals) to use')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--op',dest='eda_option',action='store',type='int',default=2,help='EDA option; default is 2 (almo-pol)')
   parser.add_option('--bsse',dest='bsse',action='store_true',default=False,help='set EDA_BSSE to true')
   parser.add_option('--skip_ortho_decomp', dest='skip_ortho_decomp',action='store_true',default=False,help='skip the orthogonal decomposition of frozen interaction (frz_ortho_decomp = -1')
   parser.add_option('--dfxc',dest='dfxc',action='store',type='string',default=None, help='choose the DFXC to use')
   parser.add_option('--rehyb',dest='rehyb',action='store_true',default=False,help='calculate E_rehyb with eda_separate_rehyb = true')
   parser.add_option('--align_spin',dest='align_spin',action='store_true',default=False,help='set eda_align_frgm_spin = 2')
   parser.add_option('--mbe',dest='mbe',action='store_true',default=False,help='do many body expansion (limited to 3-body systems for now)')
   parser.add_option('--index_range', dest='index_range', action='callback', type='string', default=None, callback=string_sp_callback, help='Only run jobs whose integer index is in a certain range (suitable for cases like MD snapshots)')
   parser.add_option('--smd', dest='smd', action='store', type='string', default=None, help='turn on SMD solvation and specify the solvent')
   parser.add_option('--pcm', dest='pcm', action='store', type='float', default=0., help='turn on PCM solvation and specify the dielectric constant')
   options, args = parser.parse_args(ArgsIn)
  
   if not options.onsite:
      if len(args) < 3:
         parser.print_help()
         sys.exit(1)
   else:
      if len(args) < 2:
         parser.print_help()
         sys.exit(1)
   
   if not options.all and options.target==None and options.keyword==None:
      print("The target directory must be specified: one or some or all")
      parser.print_help()
      sys.exit(1)
   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def string_sp_callback_space(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(' '))

def snapshot_in_range(xyz_file, options):
   #the local index_range is a 2-tuple of int
   range_lower = int(options.index_range[0])
   range_upper = int(options.index_range[1])+1
   snap_index = int(re.search("(\d+).xyz", xyz_file).group(1))
   if snap_index in range(range_lower, range_upper):
      return True
   else:
      return False


def WriteMolecule_Frgm(fw, XYZ, FRGM, skipfrgm=0):
   if not skipfrgm:
      qmol.WriteMolecule_Frgm(fw, XYZ, FRGM)
   else: #this skipfrgm thing is hard-coded for 3-body mbe
      fw.write('$molecule\n')
      if skipfrgm not in [1, 2, 3]:
         print("invalid skipfrgm index: %d" %skipfrgm)
         sys.exit(0)
      #recalculate charge and mult (both open-shell not allowed for now)
      total_charge = 0
      max_mult = 1
      n_openshell = 0
      for ifrgm in range(0, FRGM.n_frgm):
         if ifrgm == skipfrgm-1:
            continue
         total_charge += FRGM.charge_frgm[ifrgm]
         if max_mult < FRGM.mult_frgm[ifrgm]:
            max_mult = FRGM.mult_frgm[ifrgm]
         if FRGM.mult_frgm[ifrgm] > 1:
            n_openshell += 1
      if n_openshell > 1:
         print("multiple open-shell fragments not allowed for now")
         sys.exit(0)

      fw.write("%d %d\n" %(total_charge, max_mult))
      for ifrgm in range(0, FRGM.n_frgm):
         if ifrgm == skipfrgm-1:
            continue
         fw.write('--\n')
         fw.write("%d %d\n" %(FRGM.charge_frgm[ifrgm], FRGM.mult_frgm[ifrgm]))
         natom_frgm = FRGM.natoms_frgm[ifrgm]
         index_start = FRGM.atoms_offset[ifrgm]
         for iatom in range(index_start, index_start+natom_frgm):
            atomic_symbol = XYZ.AtomList[iatom]
            x, y, z = XYZ.CoordList[iatom]
            fw.write("%-4s %-10.5f %-10.5f %-10.5f\n" %(atomic_symbol, x, y, z))
      fw.write('$end\n')
      fw.write("\n")

def set_rems_eda(curREM, method, basis, options):
   qrems.set_rems_common(curREM, method, basis)
   #set EDA2-specific rems
   qrems.ModRem('JOBTYPE', 'EDA', curREM)
   qrems.ModRem('EDA2', str(options.eda_option), curREM)
   if options.bsse:
      qrems.ModRem('EDA_BSSE', 'TRUE', curREM)
   if options.skip_ortho_decomp:
      qrems.ModRem('FRZ_ORTHO_DECOMP', '-1', curREM)
   if options.dfxc!=None:
      if options.dfxc.upper()=='HF':  #should be handled by default
         qrems.ModRem('DISP_FREE_X', 'HF', curREM)
         qrems.ModRem('DISP_FREE_C', '0', curREM) 
      elif options.dfxc.upper()=='DLDF':
         qrems.ModRem('DISP_FREE_X', 'DLDF', curREM)
         qrems.ModRem('DISP_FREE_C', '0', curREM) 
      elif options.dfxc.upper()=='REVPBE':
         qrems.ModRem('DISP_FREE_X', 'REVPBE', curREM)
         qrems.ModRem('DISP_FREE_C', 'PBE', curREM)
      elif options.dfxc.upper()=='BLYP':
         qrems.ModRem('DISP_FREE_X', 'B', curREM)
         qrems.ModRem('DISP_FREE_C', 'LYP', curREM)
      else:
         print("Requested DFXC: %s is not recognized" %options.dfxc)

   qrems.ModRem('SCF_GUESS', 'FRAGMO', curREM)
   if options.rehyb:
      qrems.ModRem('EDA_SEPARATE_REHYB', 'TRUE', curREM)
   if options.align_spin:
      qrems.ModRem('EDA_ALIGN_FRGM_SPIN', '2', curREM)
   if options.pcm:
      qrems.ModRem('SOLVENT_METHOD', 'PCM', curREM)
   if options.smd:
      qrems.ModRem('SOLVENT_METHOD', 'SMD', curREM)

   #default rem_frgm
   qrems.ModRem_Frgm('MEM_TOTAL', '16000', curREM)
   qrems.ModRem_Frgm('MEM_STATIC', '2000', curREM)
   qrems.ModRem_Frgm('SCF_GUESS', 'SAD', curREM)

def XYZ_to_Input(inputfile, XYZ, FRGM, curREM, skipfrgm=0):
   fw = open(inputfile, 'w')
   #check if unrestricted (any open-shell fragment?)
   unrestricted = qmol.detect_unrestricted_frgm(FRGM)
   if unrestricted:
      qrems.ModRem('UNRESTRICTED','TRUE',curREM)

   WriteMolecule_Frgm(fw, XYZ, FRGM, skipfrgm)
   qrems.AppendRem(fw, curREM)
   if options.pcm > 0.0 or options.smd != None:
      qrems.AppendSolvationSecs(fw, options.pcm, options.smd)
   #qrems.AppendRemFrgm(fw,curREM)
   fw.close()

#the script 
options, args = ParseInput(sys.argv)
xyz_path = args[1]
frgm_partition = ''
if not options.onsite:
   frgm_partition = args[2]
if xyz_path[-1] != '/':
   xyz_path += '/'

rem_file = os.path.expandvars('$QREMPATH')+'/'+'rem_eda2'
curREM = qrems.ParseRems(rem_file, do_rem_frgm=True)

#determine xyz_file list
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the existence of input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

#parse the fragment file
FRGM = ''
if not options.onsite:   #all xyz files share the common frgm file: parse it beforehand
   FRGM = qmol.FRGM(frgm_partition)

#create the input file in the input_path
for method in options.method:
   for basis in options.basis: 
      basis_short = qrems.basis_abbr(basis)
      set_rems_eda(curREM, method, basis, options) 
      for xyz_file in xyzfile_list:
         if(options.index_range!=None):
            if (not snapshot_in_range(xyz_file, options)):
               continue
         parsed_XYZ = qmol.XYZ(xyz_file)
         if options.onsite:
            frgm_file = xyz_file[:-4]+'.frgm'
            FRGM = qmol.FRGM(frgm_file)

         #supersystem job
         inputfile = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_'+method+'_'+basis_short+'.in'
         XYZ_to_Input(inputfile, parsed_XYZ, FRGM, curREM)

         #run 3 more jobs if do MBE
         if options.mbe:
            #do 1,2, skip 3
            inputfile12 = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_mbe12_'+method+'_'+basis_short+'.in'
            XYZ_to_Input(inputfile12, parsed_XYZ, FRGM, curREM, 3) 

            #do 2,3, skip 1
            inputfile23 = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_mbe23_'+method+'_'+basis_short+'.in'
            XYZ_to_Input(inputfile23, parsed_XYZ, FRGM, curREM, 1) 

            #do 1,3, skip 2
            inputfile13 = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_mbe13_'+method+'_'+basis_short+'.in'
            XYZ_to_Input(inputfile13, parsed_XYZ, FRGM, curREM, 2) 
