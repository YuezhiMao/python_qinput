#! /usr/bin/env python

import os, glob, re, sys
import subprocess as sp
import numpy as np
from optparse import OptionParser

def ParseInput(ArgsIn):
   UseMsg = '''
   python make_input_E_bind.py [options] [xyz_path] [rem_file] [frgm_partition]
   ''' 
   parser = OptionParser(usage=UseMsg)
   parser.add_option('-a','--all',dest='all',action='store_true',default=False,help='run all the xyz files under the xyz_path')
   parser.add_option('-k','--keyword',dest='keyword',action='store',type='string',default=None,help='create inputs for xyz files containing the keyword')
   parser.add_option('-t','--target',dest='target',action='callback',callback=string_sp_callback_space,type='string',default=None,help='create input for certain xyz files')
   parser.add_option('--onsite',dest='onsite',action='store_true',default=False,help='frgm file and xyz file under the same dir and sharing the same nameroot')
   parser.add_option('-b','--basis',dest='basis',action='callback',callback=string_sp_callback, type='string', default='aug-cc-pvtz',help='The target basis (default is aug-cc-pVTZ)')
   parser.add_option('-m','--method',dest='method',action='callback',type='string', default=None, callback=string_sp_callback,help='The methods (density functionals) to use')
   parser.add_option('-i','--input_path',dest='input_path',action='store',type='string', default='input/',help='The directory storing the generated inputs')
   parser.add_option('--op',dest='eda_option',action='store',type='int',default=1,help='EDA option; default is 2 (almo-pol)')
   parser.add_option('--bsse',dest='bsse',action='store_true',default=False,help='set EDA_BSSE to true')
   parser.add_option('--skip_ortho_decomp', dest='skip_ortho_decomp',action='store_true',default=False,help='skip the orthogonal decomposition of frozen interaction')
   parser.add_option('--dfxc',dest='dfxc',action='store',type='string',default=None, help='choose the DFXC to use')
   parser.add_option('--mbe',dest='mbe',action='store_true',default=False,help='do many body expansion (limited to 3-body systems for now)')
   parser.add_option('--snap_range', dest='snap_range', action='callback', type='string', default=None, callback=string_sp_callback, help='Only run snapshots in the given range')
   options, args = parser.parse_args(ArgsIn)
  
   if not options.onsite:
      if len(args) < 4:
         parser.print_help()
         sys.exit(1)
   else:
      if len(args) < 3:
         parser.print_help()
         sys.exit(1)
   
   if not options.all and options.target==None and options.keyword==None:
      print "The target directory must be specified: one or some or all"
      parser.print_help()
      sys.exit(1)
   return options, args

def string_sp_callback(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(','))

def string_sp_callback_space(option, opt, value, parser):
   setattr(parser.values, option.dest, value.split(' '))

def snapshot_in_range(xyz_file, options):
   #the local snap_range is a 2-tuple of int
   range_lower = int(options.snap_range[0])
   range_upper = int(options.snap_range[1])+1
   snap_index = int(re.search("(\d+).xyz", xyz_file).group(1))
   if snap_index in range(range_lower, range_upper):
      return True
   else:
      return False

class XYZ:
   def __init__(self, xyz_file):
      #print xyz_file
      self.Name = re.search("/([^/]+).xyz$", xyz_file).group(1)
      f = open(xyz_file, 'r')
      self.AtomList = []
      self.CoordList = []
      for line in f.readlines():
         l = re.search('^\s*(\d+)\s*$', line)
         if l!=None:
            self.NAtom = int(l.group(1))
         l = re.search('(\S+)\s+(\S+)\s+(\S+)\s+(\S+)', line)
         if l!=None:
            self.AtomList.append(l.group(1))
            coord = float(l.group(2)), float(l.group(3)), float(l.group(4))
            self.CoordList.append(coord)

      if(len(self.AtomList)!=self.NAtom):
         print "Error in number of atoms"
         sys.exit(1)


def ParseFRGM(FRGMFile, debug = False):
   FRGM = {}
   counter = 0
   f = open(FRGMFile,'r')
   line = f.readline()
   while line!='':
      l=re.search("(\#)",line) 
      if (l==None):
         counter = counter + 1
         if counter == 1:
            l=re.search("(\S+)",line) 
            if (not l==None):
               FRGM["total_charge"] = int(l.group(1)) 
               if debug:
                  print "supersystem charge is "+ str(FRGM["total_charge"])
            else:
               print "error parsing frgm file"
         if counter == 2:
            l=re.search("(\S+)",line) 
            if (not l==None):
               FRGM["total_mult"] = int(l.group(1)) 
               if debug:
                  print "supersystem multiplicity is "+ str(FRGM["total_mult"])
            else:
               print "error parsing frgm file"
         if counter == 3:
            l=re.search("(\S+)",line) 
            if (not l==None):
               FRGM["charge_frgm"] = [int(i) for i in line.split()]
               if debug:
                  print "printing fragment charges"
                  print FRGM["charge_frgm"]
            else:
               print "error parsing frgm file"
         if counter == 4:
            l=re.search("(\S+)",line) 
            if (not l==None):
               FRGM["mult_frgm"] = [int(i) for i in line.split()]
               if debug:
                  print "printing fragment multiplicites"
                  print FRGM["mult_frgm"]
            else:
               print "error parsing frgm file"
         if counter == 5:
            l=re.search("(\S+)",line) 
            if (not l==None):
               FRGM["atoms_frgm"] = [int(i) for i in line.split()]
               if debug:
                  print "printing number of atoms in each fragment"
                  print FRGM["atoms_frgm"]
            else:
               print "error parsing frgm file"
            #make a list for number of atoms prior to each fragment (offset)
            FRGM["NFrgm"] = len(FRGM["atoms_frgm"])
            FRGM["atoms_offset"] = np.zeros(FRGM["NFrgm"],dtype=int)
            offset = 0
            for index in range(0,FRGM["NFrgm"]):
               FRGM["atoms_offset"][index] = offset
               offset += FRGM["atoms_frgm"][index]
      line = f.readline()
   if counter != 5:
      print "did not parse the expected number of lines in "+FRGMFile 
   return FRGM

def ParseRems(RemFile): #section marks like "$rem", "$end" are needed for this function to work
   f = open(RemFile,'r')
   REMS = {}
   REMS["name"] = RemFile[4:]
   REMS["nrems"] = 0
   REMS["nrems_frgm"] = 0
   currem = 0
   REMS["the_rem"] = {}
   currem_frgm = 0
   REMS["rem_frgm"] = {}
   line = f.readline()
   #parse the main rem seciton first
   while not re.search('end',line):
      #print line
      l=re.search("(\S+)\s+(\S+)",line) #rem and value
      if (not l==None):
         REMS["the_rem"][str(currem)] = {}
         REMS["the_rem"][str(currem)]["name"] = l.group(1).upper()
         REMS["the_rem"][str(currem)]["value"] = l.group(2).upper()
         currem += 1
         REMS["nrems"] = currem
      line = f.readline()
   #then, parse the rem_frgm section
   line = f.readline()
   while not re.search('end',line):
      l=re.search("(\S+)\s+(\S+)",line) #rem and value
      if (not l==None):
         REMS["rem_frgm"][str(currem_frgm)] = {}
         REMS["rem_frgm"][str(currem_frgm)]["name"] = l.group(1).upper()
         REMS["rem_frgm"][str(currem_frgm)]["value"] = l.group(2).upper()
         currem_frgm += 1
         REMS["nrems_frgm"] = currem_frgm
      line = f.readline()
   f.close()
   return REMS 

def ModRem(r_name,r_value,MyREMS):
	#see if the rem is already set
   REM_NAME = r_name.upper()
   REM_VALUE = r_value.upper()
   done = False
   for rem in range(MyREMS["nrems"]):
      if (MyREMS["the_rem"][str(rem)]["name"] == REM_NAME):
	#found in the rem already set up
         MyREMS["the_rem"][str(rem)]["value"] = REM_VALUE
         done = True
   if (not done):	#not find, add this new rem
      currem = MyREMS["nrems"]
      MyREMS["the_rem"][str(currem)] = {}
      MyREMS["the_rem"][str(currem)]["name"] = REM_NAME
      MyREMS["the_rem"][str(currem)]["value"] = REM_VALUE
      MyREMS["nrems"] = currem + 1
   return

def ModRem_Frgm(r_name, r_value, MyREMS):
   REM_NAME = r_name.upper()
   REM_VALUE = r_value.upper()
   done = False
   for rem_frgm in range(MyREMS["nrems_frgm"]):
      if (MyREMS["rem_frgm"][str(rem_frgm)]["name"] == REM_NAME):
	     #found in the rem already set up
         MyREMS["rem_frgm"][str(rem_frgm)]["value"] = REM_VALUE
         done = True
   if (not done):	#not find, add this new rem
      currem_frgm = MyREMS["nrems_frgm"]
      MyREMS["rem_frgm"][str(currem_frgm)] = {}
      MyREMS["rem_frgm"][str(currem_frgm)]["name"] = REM_NAME
      MyREMS["rem_frgm"][str(currem_frgm)]["value"] = REM_VALUE
      MyREMS["nrems_frgm"] = currem_frgm + 1

def AppendRem(fh, MyREMS):
   # write the main rem
   fh.write('$rem\n')
   for rem in range(MyREMS["nrems"]):
      fh.write(MyREMS["the_rem"][str(rem)]["name"]+'  '+MyREMS["the_rem"][str(rem)]["value"]+'\n')
   fh.write('$end\n')
   fh.write('\n')
   # write the rem_frgm
   fh.write('$rem_frgm\n')
   for rem_frgm in range(MyREMS["nrems_frgm"]):
      fh.write(MyREMS["rem_frgm"][str(rem_frgm)]["name"]+'  '+ MyREMS["rem_frgm"][str(rem_frgm)]["value"]+'\n')
   fh.write('$end\n')
   fh.close()
   return

def WriteMolecule_Frgm(fw, XYZ, FRGM, skipfrgm=0):
   fw.write('$molecule\n')
   if not skipfrgm:
      #total charge and mult
      fw.write("%d %d\n" %(FRGM["total_charge"], FRGM["total_mult"]))
      for ifrgm in range(0, FRGM["NFrgm"]):
         fw.write('--\n')
         fw.write("%d %d\n" %(FRGM["charge_frgm"][ifrgm], FRGM["mult_frgm"][ifrgm]))
         natom_frgm = FRGM["atoms_frgm"][ifrgm]
         index_start = FRGM["atoms_offset"][ifrgm]
         for iatom in range(index_start, index_start+natom_frgm):
            atomic_symbol = XYZ.AtomList[iatom]
            x, y, z = XYZ.CoordList[iatom]
            fw.write("%-4s %-10.5f %-10.5f %-10.5f\n" %(atomic_symbol, x, y, z))

   else:
      if skipfrgm not in [1, 2, 3]:
         print "invalid skipfrgm index: %d" %skipfrgm
         sys.exit(0)
      #recalculate charge and mult (both open-shell not allowed for now)
      total_charge = 0
      max_mult = 1
      n_openshell = 0
      for ifrgm in range(0, FRGM["NFrgm"]):
         if ifrgm == skipfrgm-1:
            continue
         total_charge += FRGM["charge_frgm"][ifrgm]
         if max_mult < FRGM["mult_frgm"][ifrgm]:
            max_mult = FRGM["mult_frgm"][ifrgm]
         if FRGM["mult_frgm"][ifrgm] > 1:
            n_openshell += 1
      if n_openshell > 1:
         print "multiple open-shell fragments not allowed for now"
         sys.exit(0)

      fw.write("%d %d\n" %(total_charge, max_mult))
      for ifrgm in range(0, FRGM["NFrgm"]):
         if ifrgm == skipfrgm-1:
            continue
         fw.write('--\n')
         fw.write("%d %d\n" %(FRGM["charge_frgm"][ifrgm], FRGM["mult_frgm"][ifrgm]))
         natom_frgm = FRGM["atoms_frgm"][ifrgm]
         index_start = FRGM["atoms_offset"][ifrgm]
         for iatom in range(index_start, index_start+natom_frgm):
            atomic_symbol = XYZ.AtomList[iatom]
            x, y, z = XYZ.CoordList[iatom]
            fw.write("%-4s %-10.5f %-10.5f %-10.5f\n" %(atomic_symbol, x, y, z))

   fw.write('$end\n')
   fw.write("\n")

def basis_abbr(BasName):    #generating abbreviated name for basis sets, using for input file names
   fullname = BasName.lower()
   if fullname == 'cc-pvdz':
      return 'dz'
   elif fullname == 'cc-pvtz':
      return 'tz'
   elif fullname == 'cc-pvqz':
      return 'qz'
   elif fullname == 'aug-cc-pvdz':
      return 'adz'
   elif fullname == 'aug-cc-pvtz':
      return 'atz'
   elif fullname == 'aug-cc-pvqz':
      return 'aqz'
   elif fullname == 'def2-svpd' or fullname == 'svpd':
      return 'svpd'
   elif fullname == 'def2-tzvpp' or fullname == 'tzvpp':
      return 'tzvpp'
   elif fullname == 'def2-tzvppd' or fullname == 'tzvppd':
      return 'tzvppd'
   elif fullname == 'def2-qzvpp' or fullname == 'qzvpp':
      return 'qzvpp'
   elif fullname == 'def2-qzvppd' or fullname == 'qzvppd':
      return 'qzvppd'
   elif fullname == 'pc-2':
      return 'pc2'
   elif fullname == 'pc-3':
      return 'pc3'
   elif fullname == 'aug-pc-2':
      return 'apc2'
   elif fullname == 'aug-pc-3':
      return 'apc3'
   elif fullname == 'dp':
      return 'dp'
   elif fullname == 'tp':
      return 'tp' 
   elif fullname == 'lp':
      return 'lp'
   else:
      print "unrecognized basis choice"
      sys.exit(1)

def Set_rems_common(curREM, method, basis, options):
   ModRem('JOBTYPE', 'EDA', curREM)
   ModRem('EDA2', str(options.eda_option), curREM)
   if options.bsse:
      ModRem('EDA_BSSE', 'TRUE', curREM)
   if options.skip_ortho_decomp:
      ModRem('FRZ_ORTHO_DECOMP', '-1', curREM)
   if options.dfxc!=None:
      if options.dfxc.upper()=='HF':  #should be handled by default
         ModRem('DISP_FREE_X', 'HF', curREM)
         ModRem('DISP_FREE_C', '0', curREM) 
      elif options.dfxc.upper()=='DLDF':
         ModRem('DISP_FREE_X', 'DLDF', curREM)
         ModRem('DISP_FREE_C', '0', curREM) 
      elif options.dfxc.upper()=='REVPBE':
         ModRem('DISP_FREE_X', 'REVPBE', curREM)
         ModRem('DISP_FREE_C', 'PBE', curREM)
      else:
         print "Requested DFXC: %s is not recognized" %options.dfxc

   if basis.upper() == 'SVPD':
      ModRem('BASIS','DEF2-SVPD',curREM)
   elif basis.upper() == 'TZVPP':
      ModRem('BASIS','DEF2-TZVPP',curREM)
   elif basis.upper() == 'TZVPPD':
      ModRem('BASIS','DEF2-TZVPPD',curREM)
   elif basis.upper() == 'QZVPP':
      ModRem('BASIS','DEF2-QZVPP',curREM)
   elif basis.upper() == 'QZVPPD':
      ModRem('BASIS','DEF2-QZVPPD',curREM)
   elif basis.upper() == 'DP': #double-zeta Pople: 6-31+G(d)
      ModRem('BASIS','6-31+G(d)', curREM)
   elif basis.upper() == 'TP': #triple-zeta Pople: 6-311++G(2df,2pd)
      ModRem('BASIS','6-311++G(2df,2pd)',curREM)
   elif basis.upper() == 'LP':
      ModRem('BASIS','6-311++G(3df,3pd)', curREM)
   else: #copy the name of standard basis
      ModRem('BASIS', basis, curREM)
   ModRem('MEM_TOTAL', '8000', curREM)
   ModRem('MEM_STATIC','2000', curREM)
   ModRem('SCF_GUESS', 'FRAGMO', curREM)
   ModRem('METHOD', method, curREM)	
   if (method.upper() != 'HF'):
      ModRem ('XC_GRID', '000099000590', curREM)		
      ModRem ('NL_GRID', '1', curREM)
   #deal with -D3 in the method
   if "-D3" in method.upper():
      add_d3_til(method, curREM)
   #if (method.upper() == 'PBE-D3'):
   #   ModRem('METHOD', 'PBE', curREM)
   #   ModRem('DFT_D','EMPIRICAL_GRIMME3', curREM)
   #if (method.upper() == 'REVPBE-D3'):
   #   ModRem('METHOD', 'REVPBE', curREM)
   #   ModRem('DFT_D','EMPIRICAL_GRIMME3', curREM)
   #if (method.upper() == 'B3LYP-D3'):
   #   ModRem('METHOD', 'B3LYP', curREM)
   #   ModRem('DFT_D','EMPIRICAL_GRIMME3', curREM)
   #if (method.upper() == 'B3LYP-D3BJ'):
   #   ModRem('METHOD', 'B3LYP', curREM)
   #   ModRem('DFT_D','D3_BJ', curREM)
   #if (method.upper() == 'BLYP-D3'):
   #   ModRem('METHOD', 'BLYP', curREM)
   #   ModRem('DFT_D','EMPIRICAL_GRIMME3', curREM)
   #if (method.upper() == 'BLYP-D3BJ' or method.upper() == 'BLYP-D3(BJ)'):
   #   ModRem('METHOD', 'BLYP', curREM)
   #   ModRem('DFT_D','D3_BJ', curREM)
   #if (method.upper() == 'TPSS-D3'):
   #   ModRem('METHOD', 'TPSS', curREM)
   #   ModRem('DFT_D','EMPIRICAL_GRIMME3', curREM)

   #default rem_frgm
   ModRem_Frgm('MEM_TOTAL', '8000', curREM)
   ModRem_Frgm('MEM_STATIC', '2000', curREM)
   ModRem_Frgm('SCF_GUESS', 'SAD', curREM)
   ModRem_Frgm('SKIP_GESMAN', 'FALSE', curREM)

def add_d3_tail(method, curREM):
   if method.upper() == 'WB97X-D3' or method.upper() == 'B97-D3':
      return
   l = re.search('(\S+)-(D3\S*)', method)
   parent_func = l.group(1)
   tail = l.group(2)
   ModRem('METHOD', parent_func, curREM)
   if 'BJ' in tail.upper():
      ModRem('DFT_D', 'D3_BJ', curREM)
   elif 'OP' in tail.upper():
      ModRem('DFT_D', 'D3_OP', curREM)
   elif 'CSO' in tail.upper():
      ModRem('DFT_D', 'D3_CSO', curREM)
   else:
      ModRem('DFT_D', 'EMPIRICAL_GRIMME3', curREM)

def XYZ_to_Input(XYZ, inputfile, FRGM, curREM, skipfrgm=0):
   #print "generate %s" %inputfile
   fw = open(inputfile, 'w')
   #check if unrestricted (any open-shell fragment?)
   unrestricted=False
   for ifrgm in range(0, FRGM["NFrgm"]):
      if ifrgm == skipfrgm-1:
         continue
      if FRGM["mult_frgm"][ifrgm] > 1:
         unrestricted=True
         break
   if unrestricted:
      ModRem('UNRESTRICTED','TRUE',curREM)

   WriteMolecule_Frgm(fw, XYZ, FRGM, skipfrgm)
   AppendRem(fw, curREM)
   fw.close()


#the script 
options, args = ParseInput(sys.argv)
xyz_path = args[1]
rem_file = args[2]
frgm_partition = ''
if not options.onsite:
   frgm_partition = args[3]
if xyz_path[-1:] != '/':
   xyz_path += '/'

#determine xyz_file list
curdir = os.getcwd()
xyzfile_list = []
if options.all:
   xyzfile_list = glob.glob(xyz_path+'*.xyz')
elif options.keyword:
   xyzfile_list = glob.glob(xyz_path+'*'+options.keyword+'*.xyz')
if options.target!=None:
   for xyz_file in options.target:
      if xyz_file not in xyzfile_list:
         xyzfile_list.append(xyz_file)

#check the existence of input_path
input_path = options.input_path
if input_path[-1:] != '/':
   input_path += '/'
if not os.path.exists(input_path):
   sp.call(['mkdir', input_path])

#parse the fragment file
FRGM = ''
if not options.onsite:   #all xyz files share the common frgm file: parse it beforehand
   FRGM = ParseFRGM(frgm_partition)

#create the input file in the input_path
for method in options.method:
   for basis in options.basis: 
      basis_short = basis_abbr(basis)
      curREM = ParseRems(rem_file)
      Set_rems_common(curREM, method, basis, options) 
      for xyz_file in xyzfile_list:
         if(options.snap_range!=None):
            if (not snapshot_in_range(xyz_file, options)):
               continue
         parsed_XYZ = XYZ(xyz_file)
         if options.onsite:
            frgm_file = xyz_file[:-4]+'.frgm'
            FRGM = ParseFRGM(frgm_file)

         #supersystem job
         inputfile = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_'+method+'_'+basis_short+'.in'
         XYZ_to_Input(parsed_XYZ, inputfile, FRGM, curREM)

         #run 3 more jobs if do MBE
         if options.mbe:
            #do 1,2, skip 3
            inputfile12 = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_mbe12_'+method+'_'+basis_short+'.in'
            XYZ_to_Input(parsed_XYZ, inputfile12, FRGM, curREM, 3) 

            #do 2,3, skip 1
            inputfile23 = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_mbe23_'+method+'_'+basis_short+'.in'
            XYZ_to_Input(parsed_XYZ, inputfile23, FRGM, curREM, 1) 

            #do 1,3, skip 2
            inputfile13 = input_path+parsed_XYZ.Name+'_eda2_op'+str(options.eda_option)+'_mbe13_'+method+'_'+basis_short+'.in'
            XYZ_to_Input(parsed_XYZ, inputfile13, FRGM, curREM, 2) 



